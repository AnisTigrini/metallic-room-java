package ca.ulaval.glo2004.gui;

import ca.ulaval.glo2004.domaine.ControlleurSalle;
import ca.ulaval.glo2004.domaine.Configuration;
import ca.ulaval.glo2004.domaine.DTO.FractionImperialeDTO;
import ca.ulaval.glo2004.domaine.FractionImperiale;
import ca.ulaval.glo2004.domaine.enums.Orientation;
import ca.ulaval.glo2004.domaine.enums.Sens;
import ca.ulaval.glo2004.domaine.enums.Vue;
import static ca.ulaval.glo2004.domaine.enums.Vue.PLAN;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Point;
import javax.swing.JFileChooser;
import javax.swing.DefaultCellEditor;
import javax.swing.filechooser.FileNameExtensionFilter;

public class MainWindow extends javax.swing.JFrame {

    protected ControlleurSalle salleControlleur;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        salleControlleur = new ControlleurSalle();
        initComponents();
    }
    
    public ControlleurSalle getControlleur(){
        return this.salleControlleur;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dialogaPropos = new javax.swing.JDialog();
        labelNotice = new javax.swing.JLabel();
        scrollPaneNotice = new javax.swing.JScrollPane();
        textAreaNotice = new javax.swing.JTextArea();
        labelMuracleNotice = new javax.swing.JLabel();
        dialogQuitter = new javax.swing.JDialog();
        labelInfoQuitter = new javax.swing.JLabel();
        boutonSauvegarder = new javax.swing.JButton();
        boutonQuitter = new javax.swing.JButton();
        comboBoxDenominateur = new javax.swing.JComboBox<>();
        dialogNouveauProjet = new javax.swing.JDialog();
        labelInfoQuitter1 = new javax.swing.JLabel();
        boutonOuiSauvegarder = new javax.swing.JButton();
        boutonNonSauvegarder = new javax.swing.JButton();
        dialogExport = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        labelResultatExport = new javax.swing.JLabel();
        panelInitialisationDeProjet = new javax.swing.JPanel();
        panelInitial = new javax.swing.JPanel();
        panelLogoMuracle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelOptionProjet = new javax.swing.JPanel();
        panelContainerBoutonsInitialisation = new javax.swing.JPanel();
        bouttonNouveauProjet = new javax.swing.JButton();
        boutonOuvrir = new javax.swing.JButton();
        panelNouveauProjetEtapeUn = new javax.swing.JPanel();
        panelInfo = new javax.swing.JPanel();
        panelEtapeUn = new javax.swing.JPanel();
        panelEtapeUnInfo = new javax.swing.JPanel();
        labelEtapes = new javax.swing.JLabel();
        labelInfoProjet = new javax.swing.JLabel();
        labelParametresSalle = new javax.swing.JLabel();
        panelEtapeUnLogo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        panelInfoProjet = new javax.swing.JPanel();
        labelEtapes1 = new javax.swing.JLabel();
        labelNomDuProjet = new javax.swing.JLabel();
        textNomDuProjet = new javax.swing.JTextField();
        labelCheminSauvegarde = new javax.swing.JLabel();
        textCheminEnregistrement = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textCheminDeSauvegarde = new javax.swing.JTextField();
        boutonChoisir = new javax.swing.JButton();
        textAreaErrorCreationProjet = new javax.swing.JTextArea();
        panelControle = new javax.swing.JPanel();
        boutonPrecedent = new javax.swing.JButton();
        boutonProchain = new javax.swing.JButton();
        boutonCreer = new javax.swing.JButton();
        boutonAnnuler = new javax.swing.JButton();
        boutonAide = new javax.swing.JButton();
        panelOuvrirProjet = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        fileChooserOuvertureInitial = new javax.swing.JFileChooser();
        panelNouveauProjetEtapeDeux = new javax.swing.JPanel();
        panelInfoDeux = new javax.swing.JPanel();
        panelEtapeUn2 = new javax.swing.JPanel();
        panelEtapeUnInfo2 = new javax.swing.JPanel();
        labelEtapes4 = new javax.swing.JLabel();
        labelInfoProjet2 = new javax.swing.JLabel();
        labelParametresSalle2 = new javax.swing.JLabel();
        panelEtapeUnLogo2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        panelInfoProjet2 = new javax.swing.JPanel();
        scrollPaneTableValeurs = new javax.swing.JScrollPane();
        tableDesMesures = new javax.swing.JTable();
        labelParametreSalleDefault = new javax.swing.JLabel();
        labelUniteDeMesure = new javax.swing.JLabel();
        comboBoxUniteDeMesure = new javax.swing.JComboBox<>();
        labelAngleDePlisSoudure = new javax.swing.JLabel();
        comboBoxAnglePlisDeSoudure = new javax.swing.JSpinner();
        panelControleDeux = new javax.swing.JPanel();
        boutonPrecedent2 = new javax.swing.JButton();
        boutonProchain2 = new javax.swing.JButton();
        boutonCreer2 = new javax.swing.JButton();
        boutonAnnuler2 = new javax.swing.JButton();
        boutonAide2 = new javax.swing.JButton();
        panelVueDeProjet = new javax.swing.JPanel();
        panelDeDrawing = new javax.swing.JPanel();
        panelProprieteDeSalle = new javax.swing.JPanel();
        labelProprieteDeSalle = new javax.swing.JLabel();
        panelProprietes2 = new javax.swing.JPanel();
        lblLongueur2 = new javax.swing.JLabel();
        cbxLongueurDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionLongueur = new javax.swing.JLabel();
        lblLargeur = new javax.swing.JLabel();
        cbxLargeurDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionLargeur = new javax.swing.JLabel();
        lblHauteur = new javax.swing.JLabel();
        cbxHauteurDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionHauteur = new javax.swing.JLabel();
        cbxEpaisseurMurDenominateur = new javax.swing.JComboBox<>();
        lblEpaisseurMur = new javax.swing.JLabel();
        lblBarreDivisionEpaisseurMur = new javax.swing.JLabel();
        lblMargePlis = new javax.swing.JLabel();
        cbxMargePlisDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionMargePlis = new javax.swing.JLabel();
        lblHauteurRetourAir = new javax.swing.JLabel();
        cbxHauteurRetourAirDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionHauteurRetourAir = new javax.swing.JLabel();
        lblDistanceSolRetourAir = new javax.swing.JLabel();
        cbxDistanceSolRetourAirDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionDistanceSolRetourAir = new javax.swing.JLabel();
        lblDistanceSolRetourAir1 = new javax.swing.JLabel();
        spinnerLongueurPartieEntiere = new javax.swing.JSpinner();
        spinnerLongueurNumerateur = new javax.swing.JSpinner();
        spinnerLargeurePartieEntiere = new javax.swing.JSpinner();
        spinnerLargeureNumerateur = new javax.swing.JSpinner();
        spinnerHauteurMurPartieEntiere = new javax.swing.JSpinner();
        spinnerHauteurMurNumerateur = new javax.swing.JSpinner();
        spinnerEpaisseurMurPartieEntiere = new javax.swing.JSpinner();
        spinnerEpaisseurMurNumerateur = new javax.swing.JSpinner();
        spinnerMargePlisPartieEntiere = new javax.swing.JSpinner();
        spinnerMargePlisNumerateur = new javax.swing.JSpinner();
        spinnerHauteurRetourAirPartieEntiere = new javax.swing.JSpinner();
        spinnerHauteurRetourAirNumerateur = new javax.swing.JSpinner();
        spinnerDistanceSolRetourAirPartieEntiere = new javax.swing.JSpinner();
        spinnerDistanceSolRetourAirNumerateur = new javax.swing.JSpinner();
        spinnerAnglePlisSoudure = new javax.swing.JSpinner();
        lblMargeSoudure = new javax.swing.JLabel();
        spinnerMargeSoudurePartieEntiere = new javax.swing.JSpinner();
        spinnerMargeSoudureNumerateur = new javax.swing.JSpinner();
        cbxMargeSoudureDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionMargePlis1 = new javax.swing.JLabel();
        lblMargeDesFenetres = new javax.swing.JLabel();
        spinnerMargeDesFenetresPartieEntiere = new javax.swing.JSpinner();
        spinnerMargeDesFenetresNumerateur = new javax.swing.JSpinner();
        lblBarreDivisionMargeDesFenetres = new javax.swing.JLabel();
        cbxMargeDesFenetresDenominateur = new javax.swing.JComboBox<>();
        spinnerHauteurDesTrousDeVentilationPartieEntiere = new javax.swing.JSpinner();
        spinnerHauteurDesTrousDeVentilationNumerateur = new javax.swing.JSpinner();
        lblBarreDivisionHauteurDesTrousDeVentilation = new javax.swing.JLabel();
        cbxHauteurDesTrousDeVentilationDenominateur = new javax.swing.JComboBox<>();
        lblHauteurDesTrousDeVentilation = new javax.swing.JLabel();
        panelVueGrillePropriete = new javax.swing.JPanel();
        labelProprieteSelection = new javax.swing.JLabel();
        panelVuesGenerales = new javax.swing.JPanel();
        comboBoxTypeDeVue = new javax.swing.JComboBox<>();
        comboBoxOrientation = new javax.swing.JComboBox<>();
        buttonInterieurExterieur = new javax.swing.JToggleButton();
        cbxPanneauNumero = new javax.swing.JComboBox<>();
        panelObjetsSelectionnes = new javax.swing.JPanel();
        panelMurSelectionne = new javax.swing.JPanel();
        lblLargeurMur = new javax.swing.JLabel();
        spinnerLargeurMurPartieEntiere = new javax.swing.JSpinner();
        spinnerLargeurMurNumerateur = new javax.swing.JSpinner();
        cbxLargeurMurDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionLargeurMur = new javax.swing.JLabel();
        panelSeparateurX = new javax.swing.JPanel();
        lblSeparateurX = new javax.swing.JLabel();
        spinnerSeparateurPositionXPartieEntiere = new javax.swing.JSpinner();
        spinnerSeparateurPositionXNumerateur = new javax.swing.JSpinner();
        labelBarreDivisionCoordonneX = new javax.swing.JLabel();
        cbxSeparateurPositionXDenominateur = new javax.swing.JComboBox<>();
        panelSeparateurY = new javax.swing.JPanel();
        lblSeparateurY = new javax.swing.JLabel();
        spinnerSeparateurPositionYPartieEntiere = new javax.swing.JSpinner();
        spinnerSeparateurPositionYNumerateur = new javax.swing.JSpinner();
        labelBarreDivisionCoordonneY = new javax.swing.JLabel();
        cbxSeparateurPositionYDenominateur = new javax.swing.JComboBox<>();
        panelAccessoires = new javax.swing.JPanel();
        lblLargeurAccesssoire = new javax.swing.JLabel();
        spinnerLargeurAccessoirePartieEntiere = new javax.swing.JSpinner();
        spinnerLargeurAccessoireNumerateur = new javax.swing.JSpinner();
        cbxLargeurAccessoireDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionLargeurAccessoire = new javax.swing.JLabel();
        lblHauteurAccesssoire = new javax.swing.JLabel();
        spinnerHauteurAccessoirePartieEntiere = new javax.swing.JSpinner();
        spinnerHauteurAccessoireNumerateur = new javax.swing.JSpinner();
        cbxHauteurAccessoireDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionHauteurAccessoire = new javax.swing.JLabel();
        lblMargeAccesssoire = new javax.swing.JLabel();
        spinnerCoordonneeXAccessoirePartieEntiere = new javax.swing.JSpinner();
        spinnerCoordonneeXAccessoireNumerateur = new javax.swing.JSpinner();
        cbxCoordonneeXAccessoireDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionMargeAccessoire = new javax.swing.JLabel();
        lblCoordonneeAccesssoireX = new javax.swing.JLabel();
        spinnerCoordonneeYAccessoirePartieEntiere = new javax.swing.JSpinner();
        spinnerCoordonneeYAccessoireNumerateur = new javax.swing.JSpinner();
        lblBarreDivisionMargeAccessoire1 = new javax.swing.JLabel();
        cbxCoordonneeYAccessoireDenominateur = new javax.swing.JComboBox<>();
        panelRetourAir = new javax.swing.JPanel();
        lblLargeurMur1 = new javax.swing.JLabel();
        spinnerLargeurRetourAirPartieEntiere = new javax.swing.JSpinner();
        spinnerLargeurRetourAirNumerateur = new javax.swing.JSpinner();
        cbxLargeurRetourAirDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionLargeurRetourAir = new javax.swing.JLabel();
        panelGrille = new javax.swing.JPanel();
        panelMurSelectionne1 = new javax.swing.JPanel();
        labelLargeurGrille = new javax.swing.JLabel();
        spinnerLargeurGrillePartieEntiere = new javax.swing.JSpinner();
        spinnerLargeurGrilleNumerateur = new javax.swing.JSpinner();
        cbxLargeurGrilleDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionLargeurMur1 = new javax.swing.JLabel();
        panelMurSelectionne2 = new javax.swing.JPanel();
        labelHauteurGrille = new javax.swing.JLabel();
        spinnerHauteurGrillePartieEntiere = new javax.swing.JSpinner();
        spinnerHauteurGrilleNumerateur = new javax.swing.JSpinner();
        cbxHauteurGrilleDenominateur = new javax.swing.JComboBox<>();
        lblBarreDivisionLargeurMur2 = new javax.swing.JLabel();
        scrollingPaneDrawingPanel = new javax.swing.JScrollPane();
        drawingPanel = new ca.ulaval.glo2004.gui.DrawingPanel(this);
        errorMessage = new javax.swing.JTextPane();
        barMenu = new javax.swing.JMenuBar();
        menuFichier = new javax.swing.JMenu();
        menuNouveauProjet = new javax.swing.JMenuItem();
        menuEnregistrerProjet = new javax.swing.JMenuItem();
        exporterFichier = new javax.swing.JMenuItem();
        menuQuitter = new javax.swing.JMenuItem();
        menuEditer = new javax.swing.JMenu();
        menuUndo = new javax.swing.JMenuItem();
        menuRedo = new javax.swing.JMenuItem();
        menuVues = new javax.swing.JMenu();
        menuVueEnPlan = new javax.swing.JMenuItem();
        menuVueEnElevation = new javax.swing.JMenuItem();
        menuVueDeMur = new javax.swing.JMenuItem();
        menuVueDePanneau = new javax.swing.JMenuItem();
        menuInserer = new javax.swing.JMenu();
        menuAccessoire = new javax.swing.JMenu();
        ajouterFenetre = new javax.swing.JMenuItem();
        ajouterPorte = new javax.swing.JMenuItem();
        ajouterPriseElectrique = new javax.swing.JMenuItem();
        ajouterRetourAir = new javax.swing.JMenuItem();
        menuOutils = new javax.swing.JMenu();
        menuAfficherGrille = new javax.swing.JMenuItem();
        menuAide = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        menuSupprimer = new javax.swing.JMenu();
        supprimerSelection = new javax.swing.JMenuItem();

        dialogaPropos.setMinimumSize(new java.awt.Dimension(355, 300));

        labelNotice.setFont(new java.awt.Font("Abyssinica SIL", 3, 24)); // NOI18N
        labelNotice.setText("Notice");
        labelNotice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        labelNotice.setMaximumSize(new java.awt.Dimension(300, 300));

        textAreaNotice.setEditable(false);
        textAreaNotice.setColumns(20);
        textAreaNotice.setRows(5);
        textAreaNotice.setText("Ce logiciel a été créé par les membres suivants :\n    - Steve Cameron\n    - Samuel Aubert\n    - Anis Tigrini\n    - Christian Willy\n\nLe logiciel et crée dans le cadre du cours de\nGLO-2004 de l'Université Laval.\nToute reproduction non autorisée est prohibée. ");
        textAreaNotice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scrollPaneNotice.setViewportView(textAreaNotice);

        labelMuracleNotice.setFont(new java.awt.Font("Z003", 3, 36)); // NOI18N
        labelMuracleNotice.setText("Muracle");

        javax.swing.GroupLayout dialogaProposLayout = new javax.swing.GroupLayout(dialogaPropos.getContentPane());
        dialogaPropos.getContentPane().setLayout(dialogaProposLayout);
        dialogaProposLayout.setHorizontalGroup(
            dialogaProposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelNotice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dialogaProposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneNotice, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(dialogaProposLayout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(labelMuracleNotice, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialogaProposLayout.setVerticalGroup(
            dialogaProposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogaProposLayout.createSequentialGroup()
                .addComponent(labelNotice, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneNotice, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelMuracleNotice)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogQuitter.setMinimumSize(new java.awt.Dimension(300, 120));

        labelInfoQuitter.setText("Voulez vous quitter sans sauvegarde?");

        boutonSauvegarder.setBackground(new java.awt.Color(26, 174, 159));
        boutonSauvegarder.setForeground(new java.awt.Color(255, 255, 255));
        boutonSauvegarder.setText("Sauvegarder");
        boutonSauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonSauvegarderActionPerformed(evt);
            }
        });

        boutonQuitter.setBackground(new java.awt.Color(207, 20, 43));
        boutonQuitter.setForeground(new java.awt.Color(255, 255, 255));
        boutonQuitter.setText("Quitter");
        boutonQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonQuitterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogQuitterLayout = new javax.swing.GroupLayout(dialogQuitter.getContentPane());
        dialogQuitter.getContentPane().setLayout(dialogQuitterLayout);
        dialogQuitterLayout.setHorizontalGroup(
            dialogQuitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogQuitterLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(dialogQuitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(dialogQuitterLayout.createSequentialGroup()
                        .addComponent(boutonSauvegarder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(boutonQuitter))
                    .addComponent(labelInfoQuitter))
                .addGap(28, 28, 28))
        );
        dialogQuitterLayout.setVerticalGroup(
            dialogQuitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogQuitterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelInfoQuitter)
                .addGap(18, 18, 18)
                .addGroup(dialogQuitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boutonQuitter)
                    .addComponent(boutonSauvegarder))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        comboBoxDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));

        dialogNouveauProjet.setMinimumSize(new java.awt.Dimension(300, 120));

        labelInfoQuitter1.setText("Voulez vous sauvegarder votre travail?");

        boutonOuiSauvegarder.setBackground(new java.awt.Color(26, 174, 159));
        boutonOuiSauvegarder.setForeground(new java.awt.Color(255, 255, 255));
        boutonOuiSauvegarder.setText("Oui");
        boutonOuiSauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonOuiSauvegarderActionPerformed(evt);
            }
        });

        boutonNonSauvegarder.setBackground(new java.awt.Color(207, 20, 43));
        boutonNonSauvegarder.setForeground(new java.awt.Color(255, 255, 255));
        boutonNonSauvegarder.setText("Non");
        boutonNonSauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonNonSauvegarderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogNouveauProjetLayout = new javax.swing.GroupLayout(dialogNouveauProjet.getContentPane());
        dialogNouveauProjet.getContentPane().setLayout(dialogNouveauProjetLayout);
        dialogNouveauProjetLayout.setHorizontalGroup(
            dialogNouveauProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogNouveauProjetLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(dialogNouveauProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(dialogNouveauProjetLayout.createSequentialGroup()
                        .addComponent(boutonOuiSauvegarder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(boutonNonSauvegarder))
                    .addComponent(labelInfoQuitter1))
                .addGap(28, 28, 28))
        );
        dialogNouveauProjetLayout.setVerticalGroup(
            dialogNouveauProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogNouveauProjetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelInfoQuitter1)
                .addGap(18, 18, 18)
                .addGroup(dialogNouveauProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boutonNonSauvegarder)
                    .addComponent(boutonOuiSauvegarder))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogExport.setMinimumSize(new java.awt.Dimension(300, 120));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        labelResultatExport.setText("Le panneau a été exportés");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 6, 36, 6);
        jPanel1.add(labelResultatExport, gridBagConstraints);

        javax.swing.GroupLayout dialogExportLayout = new javax.swing.GroupLayout(dialogExport.getContentPane());
        dialogExport.getContentPane().setLayout(dialogExportLayout);
        dialogExportLayout.setHorizontalGroup(
            dialogExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogExportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );
        dialogExportLayout.setVerticalGroup(
            dialogExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogExportLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Muracle");
        setBackground(new java.awt.Color(158, 173, 186));
        setMinimumSize(new java.awt.Dimension(1200, 710));
        setPreferredSize(new java.awt.Dimension(1200, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        panelInitialisationDeProjet.setBackground(new java.awt.Color(195, 207, 217));
        panelInitialisationDeProjet.setMaximumSize(new java.awt.Dimension(800, 575));
        panelInitialisationDeProjet.setMinimumSize(new java.awt.Dimension(800, 575));
        panelInitialisationDeProjet.setPreferredSize(new java.awt.Dimension(800, 575));
        panelInitialisationDeProjet.setLayout(new java.awt.CardLayout(50, 100));

        panelInitial.setAlignmentX(1.0F);
        panelInitial.setMaximumSize(new java.awt.Dimension(600, 300));
        panelInitial.setMinimumSize(new java.awt.Dimension(600, 300));
        panelInitial.setPreferredSize(new java.awt.Dimension(600, 300));
        panelInitial.setLayout(new java.awt.GridLayout(1, 0));

        panelLogoMuracle.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(195, 207, 217)));
        panelLogoMuracle.setMaximumSize(new java.awt.Dimension(300, 300));
        panelLogoMuracle.setMinimumSize(new java.awt.Dimension(300, 300));
        panelLogoMuracle.setPreferredSize(new java.awt.Dimension(300, 300));
        panelLogoMuracle.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Z003", 3, 36)); // NOI18N
        jLabel1.setText("Muracle");
        panelLogoMuracle.add(jLabel1, new java.awt.GridBagConstraints());

        panelInitial.add(panelLogoMuracle);

        panelOptionProjet.setMaximumSize(new java.awt.Dimension(300, 300));
        panelOptionProjet.setMinimumSize(new java.awt.Dimension(300, 300));
        panelOptionProjet.setPreferredSize(new java.awt.Dimension(300, 300));
        panelOptionProjet.setLayout(new java.awt.GridBagLayout());

        panelContainerBoutonsInitialisation.setMaximumSize(new java.awt.Dimension(200, 100));
        panelContainerBoutonsInitialisation.setMinimumSize(new java.awt.Dimension(200, 100));
        panelContainerBoutonsInitialisation.setPreferredSize(new java.awt.Dimension(200, 100));
        panelContainerBoutonsInitialisation.setLayout(new java.awt.GridLayout(0, 1, 0, 20));

        bouttonNouveauProjet.setBackground(new java.awt.Color(26, 174, 159));
        bouttonNouveauProjet.setForeground(new java.awt.Color(255, 255, 255));
        bouttonNouveauProjet.setText("Nouveau Projet");
        bouttonNouveauProjet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouttonNouveauProjetActionPerformed(evt);
            }
        });
        panelContainerBoutonsInitialisation.add(bouttonNouveauProjet);

        boutonOuvrir.setBackground(new java.awt.Color(120, 136, 150));
        boutonOuvrir.setForeground(new java.awt.Color(255, 255, 255));
        boutonOuvrir.setText("Ouvrir");
        boutonOuvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonOuvrirActionPerformed(evt);
            }
        });
        panelContainerBoutonsInitialisation.add(boutonOuvrir);

        panelOptionProjet.add(panelContainerBoutonsInitialisation, new java.awt.GridBagConstraints());

        panelInitial.add(panelOptionProjet);

        panelInitialisationDeProjet.add(panelInitial, "card2");

        panelNouveauProjetEtapeUn.setBackground(new java.awt.Color(195, 207, 217));
        panelNouveauProjetEtapeUn.setMaximumSize(new java.awt.Dimension(600, 400));
        panelNouveauProjetEtapeUn.setMinimumSize(new java.awt.Dimension(600, 400));
        panelNouveauProjetEtapeUn.setPreferredSize(new java.awt.Dimension(600, 400));
        panelNouveauProjetEtapeUn.setLayout(new javax.swing.BoxLayout(panelNouveauProjetEtapeUn, javax.swing.BoxLayout.PAGE_AXIS));

        panelInfo.setMaximumSize(new java.awt.Dimension(600, 350));
        panelInfo.setMinimumSize(new java.awt.Dimension(600, 350));
        panelInfo.setPreferredSize(new java.awt.Dimension(600, 350));
        panelInfo.setLayout(new javax.swing.BoxLayout(panelInfo, javax.swing.BoxLayout.LINE_AXIS));

        panelEtapeUn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(195, 207, 217)));
        panelEtapeUn.setMaximumSize(new java.awt.Dimension(160, 350));
        panelEtapeUn.setMinimumSize(new java.awt.Dimension(160, 350));
        panelEtapeUn.setPreferredSize(new java.awt.Dimension(160, 350));
        panelEtapeUn.setLayout(new javax.swing.BoxLayout(panelEtapeUn, javax.swing.BoxLayout.PAGE_AXIS));

        panelEtapeUnInfo.setMaximumSize(new java.awt.Dimension(150, 300));
        panelEtapeUnInfo.setMinimumSize(new java.awt.Dimension(150, 300));
        panelEtapeUnInfo.setPreferredSize(new java.awt.Dimension(150, 300));

        labelEtapes.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        labelEtapes.setText("Étapes");
        labelEtapes.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        labelEtapes.setMaximumSize(new java.awt.Dimension(150, 19));
        labelEtapes.setPreferredSize(new java.awt.Dimension(150, 19));

        labelInfoProjet.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        labelInfoProjet.setText("1. Informations Projet");
        labelInfoProjet.setPreferredSize(new java.awt.Dimension(150, 18));

        labelParametresSalle.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        labelParametresSalle.setText("2. Paramètres Salle");
        labelParametresSalle.setPreferredSize(new java.awt.Dimension(150, 18));

        javax.swing.GroupLayout panelEtapeUnInfoLayout = new javax.swing.GroupLayout(panelEtapeUnInfo);
        panelEtapeUnInfo.setLayout(panelEtapeUnInfoLayout);
        panelEtapeUnInfoLayout.setHorizontalGroup(
            panelEtapeUnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelInfoProjet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(labelEtapes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(labelParametresSalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelEtapeUnInfoLayout.setVerticalGroup(
            panelEtapeUnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEtapeUnInfoLayout.createSequentialGroup()
                .addComponent(labelEtapes, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelInfoProjet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(labelParametresSalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelEtapeUn.add(panelEtapeUnInfo);

        panelEtapeUnLogo.setMaximumSize(new java.awt.Dimension(150, 50));
        panelEtapeUnLogo.setMinimumSize(new java.awt.Dimension(150, 50));
        panelEtapeUnLogo.setPreferredSize(new java.awt.Dimension(150, 50));
        panelEtapeUnLogo.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Z003", 3, 24)); // NOI18N
        jLabel2.setText("Muracle");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        panelEtapeUnLogo.add(jLabel2, new java.awt.GridBagConstraints());

        panelEtapeUn.add(panelEtapeUnLogo);

        panelInfo.add(panelEtapeUn);

        panelInfoProjet.setBackground(new java.awt.Color(247, 249, 250));
        panelInfoProjet.setMaximumSize(new java.awt.Dimension(440, 350));
        panelInfoProjet.setMinimumSize(new java.awt.Dimension(440, 350));
        panelInfoProjet.setPreferredSize(new java.awt.Dimension(440, 350));

        labelEtapes1.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        labelEtapes1.setText("Informations Projet");
        labelEtapes1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        labelEtapes1.setMaximumSize(new java.awt.Dimension(150, 19));
        labelEtapes1.setPreferredSize(new java.awt.Dimension(150, 19));

        labelNomDuProjet.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        labelNomDuProjet.setText("Nom du Projet:");

        textNomDuProjet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        textNomDuProjet.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textNomDuProjet.setInheritsPopupMenu(true);
        textNomDuProjet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textNomDuProjetKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textNomDuProjetKeyTyped(evt);
            }
        });

        labelCheminSauvegarde.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        labelCheminSauvegarde.setText("Chemin de sauvegarde:");

        textCheminEnregistrement.setEditable(false);
        textCheminEnregistrement.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        textCheminEnregistrement.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        textCheminEnregistrement.setCaretColor(new java.awt.Color(0, 0, 51));

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        jLabel6.setText("Le projet sera enregistré dans le dossier suivant :");

        textCheminDeSauvegarde.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        textCheminDeSauvegarde.setEnabled(false);

        boutonChoisir.setBackground(new java.awt.Color(26, 174, 159));
        boutonChoisir.setForeground(new java.awt.Color(255, 255, 255));
        boutonChoisir.setText("Choisir");
        boutonChoisir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonChoisirActionPerformed(evt);
            }
        });

        textAreaErrorCreationProjet.setEditable(false);
        textAreaErrorCreationProjet.setBackground(new java.awt.Color(204, 204, 204));
        textAreaErrorCreationProjet.setColumns(20);
        textAreaErrorCreationProjet.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        textAreaErrorCreationProjet.setForeground(new java.awt.Color(153, 0, 0));
        textAreaErrorCreationProjet.setRows(5);
        textAreaErrorCreationProjet.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 0), 1, true));

        javax.swing.GroupLayout panelInfoProjetLayout = new javax.swing.GroupLayout(panelInfoProjet);
        panelInfoProjet.setLayout(panelInfoProjetLayout);
        panelInfoProjetLayout.setHorizontalGroup(
            panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoProjetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInfoProjetLayout.createSequentialGroup()
                        .addComponent(labelEtapes1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panelInfoProjetLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfoProjetLayout.createSequentialGroup()
                        .addGroup(panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textCheminEnregistrement, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelInfoProjetLayout.createSequentialGroup()
                                .addGroup(panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelCheminSauvegarde)
                                    .addComponent(labelNomDuProjet))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textNomDuProjet, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelInfoProjetLayout.createSequentialGroup()
                                        .addComponent(textCheminDeSauvegarde, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boutonChoisir)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(38, 38, 38))
                    .addGroup(panelInfoProjetLayout.createSequentialGroup()
                        .addComponent(textAreaErrorCreationProjet, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelInfoProjetLayout.setVerticalGroup(
            panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoProjetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelEtapes1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNomDuProjet)
                    .addComponent(textNomDuProjet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInfoProjetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCheminSauvegarde)
                    .addComponent(textCheminDeSauvegarde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boutonChoisir))
                .addGap(68, 68, 68)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textCheminEnregistrement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(textAreaErrorCreationProjet, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        textAreaErrorCreationProjet.setVisible(false);

        panelInfo.add(panelInfoProjet);

        panelNouveauProjetEtapeUn.add(panelInfo);

        panelControle.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(195, 207, 217)));
        panelControle.setMaximumSize(new java.awt.Dimension(600, 50));
        panelControle.setMinimumSize(new java.awt.Dimension(600, 50));
        panelControle.setPreferredSize(new java.awt.Dimension(600, 50));
        panelControle.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 13));

        boutonPrecedent.setBackground(new java.awt.Color(195, 207, 217));
        boutonPrecedent.setForeground(new java.awt.Color(255, 255, 255));
        boutonPrecedent.setText("Précédent");
        boutonPrecedent.setEnabled(false);
        panelControle.add(boutonPrecedent);

        boutonProchain.setBackground(new java.awt.Color(26, 174, 159));
        boutonProchain.setForeground(new java.awt.Color(255, 255, 255));
        boutonProchain.setText("Prochain");
        boutonProchain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonProchainActionPerformed(evt);
            }
        });
        panelControle.add(boutonProchain);

        boutonCreer.setBackground(new java.awt.Color(195, 207, 217));
        boutonCreer.setText("Créer");
        boutonCreer.setEnabled(false);
        panelControle.add(boutonCreer);

        boutonAnnuler.setBackground(new java.awt.Color(207, 20, 43));
        boutonAnnuler.setForeground(new java.awt.Color(255, 255, 255));
        boutonAnnuler.setText("Annuler");
        boutonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonAnnulerActionPerformed(evt);
            }
        });
        panelControle.add(boutonAnnuler);

        boutonAide.setBackground(new java.awt.Color(195, 207, 217));
        boutonAide.setText("Aide");
        panelControle.add(boutonAide);

        panelNouveauProjetEtapeUn.add(panelControle);

        panelInitialisationDeProjet.add(panelNouveauProjetEtapeUn, "card3");

        panelOuvrirProjet.setBackground(new java.awt.Color(195, 207, 217));
        panelOuvrirProjet.setMaximumSize(new java.awt.Dimension(600, 400));
        panelOuvrirProjet.setMinimumSize(new java.awt.Dimension(600, 400));
        panelOuvrirProjet.setPreferredSize(new java.awt.Dimension(600, 400));
        panelOuvrirProjet.setLayout(new java.awt.GridBagLayout());

        jInternalFrame1.setMaximumSize(new java.awt.Dimension(600, 400));
        jInternalFrame1.setMinimumSize(new java.awt.Dimension(600, 400));
        jInternalFrame1.setPreferredSize(new java.awt.Dimension(600, 400));
        jInternalFrame1.setVisible(true);
        jInternalFrame1.getContentPane().setLayout(new javax.swing.BoxLayout(jInternalFrame1.getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        fileChooserOuvertureInitial.setMaximumSize(new java.awt.Dimension(500, 300));
        fileChooserOuvertureInitial.setMinimumSize(new java.awt.Dimension(500, 300));
        fileChooserOuvertureInitial.setPreferredSize(new java.awt.Dimension(598, 300));
        fileChooserOuvertureInitial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserOuvertureInitialActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(fileChooserOuvertureInitial);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Muracle Projet", "mrcl");
        fileChooserOuvertureInitial.setFileFilter(filter);

        panelOuvrirProjet.add(jInternalFrame1, new java.awt.GridBagConstraints());

        panelInitialisationDeProjet.add(panelOuvrirProjet, "card5");

        panelNouveauProjetEtapeDeux.setBackground(new java.awt.Color(195, 207, 217));
        panelNouveauProjetEtapeDeux.setMaximumSize(new java.awt.Dimension(700, 500));
        panelNouveauProjetEtapeDeux.setMinimumSize(new java.awt.Dimension(700, 500));
        panelNouveauProjetEtapeDeux.setPreferredSize(new java.awt.Dimension(700, 500));
        panelNouveauProjetEtapeDeux.setLayout(new javax.swing.BoxLayout(panelNouveauProjetEtapeDeux, javax.swing.BoxLayout.PAGE_AXIS));

        panelInfoDeux.setMaximumSize(new java.awt.Dimension(700, 350));
        panelInfoDeux.setMinimumSize(new java.awt.Dimension(700, 350));
        panelInfoDeux.setName(""); // NOI18N
        panelInfoDeux.setPreferredSize(new java.awt.Dimension(700, 350));
        panelInfoDeux.setLayout(new javax.swing.BoxLayout(panelInfoDeux, javax.swing.BoxLayout.LINE_AXIS));

        panelEtapeUn2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(195, 207, 217)));
        panelEtapeUn2.setMaximumSize(new java.awt.Dimension(160, 350));
        panelEtapeUn2.setMinimumSize(new java.awt.Dimension(160, 350));
        panelEtapeUn2.setPreferredSize(new java.awt.Dimension(160, 250));
        panelEtapeUn2.setLayout(new javax.swing.BoxLayout(panelEtapeUn2, javax.swing.BoxLayout.PAGE_AXIS));

        panelEtapeUnInfo2.setMaximumSize(new java.awt.Dimension(150, 300));
        panelEtapeUnInfo2.setMinimumSize(new java.awt.Dimension(150, 300));
        panelEtapeUnInfo2.setPreferredSize(new java.awt.Dimension(150, 300));

        labelEtapes4.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        labelEtapes4.setText("Étapes");
        labelEtapes4.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        labelEtapes4.setMaximumSize(new java.awt.Dimension(150, 19));
        labelEtapes4.setPreferredSize(new java.awt.Dimension(150, 19));

        labelInfoProjet2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        labelInfoProjet2.setText("1. Informations Projet");
        labelInfoProjet2.setPreferredSize(new java.awt.Dimension(150, 18));

        labelParametresSalle2.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        labelParametresSalle2.setText("2. Paramètres Salle");
        labelParametresSalle2.setPreferredSize(new java.awt.Dimension(150, 18));

        javax.swing.GroupLayout panelEtapeUnInfo2Layout = new javax.swing.GroupLayout(panelEtapeUnInfo2);
        panelEtapeUnInfo2.setLayout(panelEtapeUnInfo2Layout);
        panelEtapeUnInfo2Layout.setHorizontalGroup(
            panelEtapeUnInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelInfoProjet2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(labelEtapes4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(labelParametresSalle2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelEtapeUnInfo2Layout.setVerticalGroup(
            panelEtapeUnInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEtapeUnInfo2Layout.createSequentialGroup()
                .addComponent(labelEtapes4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelInfoProjet2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(labelParametresSalle2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelEtapeUn2.add(panelEtapeUnInfo2);

        panelEtapeUnLogo2.setMaximumSize(new java.awt.Dimension(150, 50));
        panelEtapeUnLogo2.setMinimumSize(new java.awt.Dimension(150, 50));
        panelEtapeUnLogo2.setPreferredSize(new java.awt.Dimension(150, 50));
        panelEtapeUnLogo2.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Z003", 3, 24)); // NOI18N
        jLabel4.setText("Muracle");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        panelEtapeUnLogo2.add(jLabel4, new java.awt.GridBagConstraints());

        panelEtapeUn2.add(panelEtapeUnLogo2);

        panelInfoDeux.add(panelEtapeUn2);

        panelInfoProjet2.setBackground(new java.awt.Color(247, 249, 250));
        panelInfoProjet2.setMaximumSize(new java.awt.Dimension(540, 350));
        panelInfoProjet2.setMinimumSize(new java.awt.Dimension(540, 350));
        panelInfoProjet2.setPreferredSize(new java.awt.Dimension(540, 350));

        scrollPaneTableValeurs.setMaximumSize(new java.awt.Dimension(520, 160));
        scrollPaneTableValeurs.setMinimumSize(new java.awt.Dimension(520, 160));
        scrollPaneTableValeurs.setPreferredSize(new java.awt.Dimension(520, 160));

        tableDesMesures.setBackground(new java.awt.Color(195, 207, 217));
        tableDesMesures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Longueure extérieure", null, null, null},
                {"Largeure extérieure", null, null, null},
                {"Hauteur des murs", null, null, null},
                {"Épaisseur des murs", null, null, null},
                {"Marge des plis", null, null, null},
                {"Marge de soudure", null, null, null},
                {"Hauteur des retours d'air", null, null, null},
                {"Distance du sol des retours d'air", null, null, null},
                {"Marge des fenêtres", null, null, null}
            },
            new String [] {
                "Type de mesure", "Partie entière", "Numérateur", "Dénominateur"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableDesMesures.setMaximumSize(new java.awt.Dimension(520, 160));
        tableDesMesures.setMinimumSize(new java.awt.Dimension(520, 160));
        tableDesMesures.setPreferredSize(new java.awt.Dimension(520, 160));
        tableDesMesures.getTableHeader().setReorderingAllowed(false);
        scrollPaneTableValeurs.setViewportView(tableDesMesures);
        if (tableDesMesures.getColumnModel().getColumnCount() > 0) {
            tableDesMesures.getColumnModel().getColumn(0).setPreferredWidth(200);
            tableDesMesures.getColumnModel().getColumn(0).setHeaderValue("Type de mesure");
            tableDesMesures.getColumnModel().getColumn(1).setHeaderValue("Partie entière");
            tableDesMesures.getColumnModel().getColumn(2).setHeaderValue("Numérateur");
            tableDesMesures.getColumnModel().getColumn(3).setHeaderValue("Dénominateur");
            tableDesMesures.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(comboBoxDenominateur));
        }
        tableDesMesures.getColumnModel().getColumn(1).setCellRenderer(new CustomTableCellRenderer());
        tableDesMesures.getColumnModel().getColumn(2).setCellRenderer(new CustomTableCellRenderer());
        tableDesMesures.getColumnModel().getColumn(3).setCellRenderer(new CustomTableCellRenderer());

        labelParametreSalleDefault.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        labelParametreSalleDefault.setText("Paramètres de la salle par défaut");
        labelParametreSalleDefault.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        labelParametreSalleDefault.setMaximumSize(new java.awt.Dimension(150, 19));
        labelParametreSalleDefault.setPreferredSize(new java.awt.Dimension(150, 19));

        labelUniteDeMesure.setText("Unité de mesure");

        comboBoxUniteDeMesure.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Po", "Cm" }));

        labelAngleDePlisSoudure.setForeground(new java.awt.Color(26, 174, 159));
        labelAngleDePlisSoudure.setText("Angle du plis de soudure");

        comboBoxAnglePlisDeSoudure.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 90.0d, 0.01d));

        javax.swing.GroupLayout panelInfoProjet2Layout = new javax.swing.GroupLayout(panelInfoProjet2);
        panelInfoProjet2.setLayout(panelInfoProjet2Layout);
        panelInfoProjet2Layout.setHorizontalGroup(
            panelInfoProjet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelParametreSalleDefault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelInfoProjet2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoProjet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInfoProjet2Layout.createSequentialGroup()
                        .addComponent(labelUniteDeMesure)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxUniteDeMesure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelAngleDePlisSoudure)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxAnglePlisDeSoudure, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelInfoProjet2Layout.createSequentialGroup()
                        .addComponent(scrollPaneTableValeurs, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panelInfoProjet2Layout.setVerticalGroup(
            panelInfoProjet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoProjet2Layout.createSequentialGroup()
                .addComponent(labelParametreSalleDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoProjet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUniteDeMesure, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxUniteDeMesure)
                    .addComponent(labelAngleDePlisSoudure)
                    .addComponent(comboBoxAnglePlisDeSoudure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneTableValeurs, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        panelInfoDeux.add(panelInfoProjet2);

        panelNouveauProjetEtapeDeux.add(panelInfoDeux);

        panelControleDeux.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(195, 207, 217)));
        panelControleDeux.setMaximumSize(new java.awt.Dimension(700, 50));
        panelControleDeux.setMinimumSize(new java.awt.Dimension(700, 50));
        panelControleDeux.setPreferredSize(new java.awt.Dimension(700, 50));

        boutonPrecedent2.setBackground(new java.awt.Color(26, 174, 159));
        boutonPrecedent2.setForeground(new java.awt.Color(255, 255, 255));
        boutonPrecedent2.setText("Précédent");
        boutonPrecedent2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonPrecedent2ActionPerformed(evt);
            }
        });

        boutonProchain2.setBackground(new java.awt.Color(195, 207, 217));
        boutonProchain2.setForeground(new java.awt.Color(255, 255, 255));
        boutonProchain2.setText("Prochain");
        boutonProchain2.setEnabled(false);

        boutonCreer2.setBackground(new java.awt.Color(26, 174, 159));
        boutonCreer2.setForeground(new java.awt.Color(255, 255, 255));
        boutonCreer2.setText("Créer");
        boutonCreer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonCreer2ActionPerformed(evt);
            }
        });

        boutonAnnuler2.setBackground(new java.awt.Color(207, 20, 43));
        boutonAnnuler2.setForeground(new java.awt.Color(255, 255, 255));
        boutonAnnuler2.setText("Annuler");
        boutonAnnuler2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonAnnuler2ActionPerformed(evt);
            }
        });

        boutonAide2.setBackground(new java.awt.Color(195, 207, 217));
        boutonAide2.setText("Aide");

        javax.swing.GroupLayout panelControleDeuxLayout = new javax.swing.GroupLayout(panelControleDeux);
        panelControleDeux.setLayout(panelControleDeuxLayout);
        panelControleDeuxLayout.setHorizontalGroup(
            panelControleDeuxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControleDeuxLayout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addComponent(boutonPrecedent2)
                .addGap(18, 18, 18)
                .addComponent(boutonProchain2)
                .addGap(32, 32, 32)
                .addComponent(boutonCreer2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(boutonAnnuler2)
                .addGap(18, 18, 18)
                .addComponent(boutonAide2)
                .addGap(90, 90, 90))
        );
        panelControleDeuxLayout.setVerticalGroup(
            panelControleDeuxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControleDeuxLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panelControleDeuxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boutonAnnuler2)
                    .addComponent(boutonAide2)
                    .addComponent(boutonCreer2)
                    .addComponent(boutonProchain2)
                    .addComponent(boutonPrecedent2))
                .addGap(13, 13, 13))
        );

        panelNouveauProjetEtapeDeux.add(panelControleDeux);

        panelInitialisationDeProjet.add(panelNouveauProjetEtapeDeux, "card3");

        getContentPane().add(panelInitialisationDeProjet, "card2");

        panelVueDeProjet.setMaximumSize(new java.awt.Dimension(800, 575));
        panelVueDeProjet.setMinimumSize(new java.awt.Dimension(800, 575));
        panelVueDeProjet.setPreferredSize(new java.awt.Dimension(800, 575));
        panelVueDeProjet.setLayout(new java.awt.CardLayout());

        panelDeDrawing.setBackground(new java.awt.Color(56, 56, 56));
        panelDeDrawing.setMaximumSize(new java.awt.Dimension(150, 575));
        panelDeDrawing.setMinimumSize(new java.awt.Dimension(150, 575));
        panelDeDrawing.setPreferredSize(new java.awt.Dimension(150, 575));

        panelProprieteDeSalle.setBackground(new java.awt.Color(0, 0, 0));
        panelProprieteDeSalle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelProprieteDeSalle.setMaximumSize(new java.awt.Dimension(275, 575));
        panelProprieteDeSalle.setMinimumSize(new java.awt.Dimension(275, 575));
        panelProprieteDeSalle.setPreferredSize(new java.awt.Dimension(300, 575));

        labelProprieteDeSalle.setFont(new java.awt.Font("Yrsa SemiBold", 1, 15)); // NOI18N
        labelProprieteDeSalle.setForeground(new java.awt.Color(255, 255, 255));
        labelProprieteDeSalle.setText("Propriétés de la salle");
        labelProprieteDeSalle.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        panelProprietes2.setBackground(new java.awt.Color(0, 0, 0));
        panelProprietes2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        panelProprietes2.setMaximumSize(new java.awt.Dimension(160, 750));
        panelProprietes2.setPreferredSize(new java.awt.Dimension(160, 750));

        lblLongueur2.setForeground(new java.awt.Color(255, 255, 255));
        lblLongueur2.setText("Longueur Extérieure");
        lblLongueur2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        cbxLongueurDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxLongueurDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionLongueur.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionLongueur.setText("/");

        lblLargeur.setForeground(new java.awt.Color(255, 255, 255));
        lblLargeur.setText("Largeur Extérieure");
        lblLargeur.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        cbxLargeurDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxLargeurDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionLargeur.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionLargeur.setText("/");

        lblHauteur.setForeground(new java.awt.Color(255, 255, 255));
        lblHauteur.setText("Hauteur des murs");
        lblHauteur.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        cbxHauteurDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxHauteurDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionHauteur.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionHauteur.setText("/");

        cbxEpaisseurMurDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxEpaisseurMurDenominateur.setVerifyInputWhenFocusTarget(false);

        lblEpaisseurMur.setForeground(new java.awt.Color(255, 255, 255));
        lblEpaisseurMur.setText("Épaisseur des murs");
        lblEpaisseurMur.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        lblBarreDivisionEpaisseurMur.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionEpaisseurMur.setText("/");

        lblMargePlis.setForeground(new java.awt.Color(255, 255, 255));
        lblMargePlis.setText("Marge des plis");
        lblMargePlis.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        cbxMargePlisDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxMargePlisDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionMargePlis.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionMargePlis.setText("/");

        lblHauteurRetourAir.setForeground(new java.awt.Color(255, 255, 255));
        lblHauteurRetourAir.setText("Hauteur des retours d'air");
        lblHauteurRetourAir.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        cbxHauteurRetourAirDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxHauteurRetourAirDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionHauteurRetourAir.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionHauteurRetourAir.setText("/");

        lblDistanceSolRetourAir.setForeground(new java.awt.Color(255, 255, 255));
        lblDistanceSolRetourAir.setText("Distance du sol des retours d'air");
        lblDistanceSolRetourAir.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        cbxDistanceSolRetourAirDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxDistanceSolRetourAirDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionDistanceSolRetourAir.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionDistanceSolRetourAir.setText("/");

        lblDistanceSolRetourAir1.setForeground(new java.awt.Color(255, 255, 255));
        lblDistanceSolRetourAir1.setText("Angles des plis de soudures (degrés)");
        lblDistanceSolRetourAir1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerLongueurPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerLongueurNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerLargeurePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerLargeureNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerHauteurMurPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerHauteurMurNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerEpaisseurMurPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerEpaisseurMurNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerMargePlisPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerMargePlisNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerHauteurRetourAirPartieEntiere.setModel(new javax.swing.SpinnerNumberModel());

        spinnerHauteurRetourAirNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerDistanceSolRetourAirPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerDistanceSolRetourAirNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerAnglePlisSoudure.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 90.0d, 0.01d));

        lblMargeSoudure.setForeground(new java.awt.Color(255, 255, 255));
        lblMargeSoudure.setText("Marge de soudure");
        lblMargeSoudure.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerMargeSoudurePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerMargeSoudureNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        cbxMargeSoudureDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxMargeSoudureDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionMargePlis1.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionMargePlis1.setText("/");

        lblMargeDesFenetres.setForeground(new java.awt.Color(255, 255, 255));
        lblMargeDesFenetres.setText("Marge des fenêtres");
        lblMargeDesFenetres.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerMargeDesFenetresPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerMargeDesFenetresNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lblBarreDivisionMargeDesFenetres.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionMargeDesFenetres.setText("/");

        cbxMargeDesFenetresDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxMargeDesFenetresDenominateur.setVerifyInputWhenFocusTarget(false);

        spinnerHauteurDesTrousDeVentilationPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerHauteurDesTrousDeVentilationNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lblBarreDivisionHauteurDesTrousDeVentilation.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionHauteurDesTrousDeVentilation.setText("/");

        cbxHauteurDesTrousDeVentilationDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxHauteurDesTrousDeVentilationDenominateur.setVerifyInputWhenFocusTarget(false);

        lblHauteurDesTrousDeVentilation.setForeground(new java.awt.Color(255, 255, 255));
        lblHauteurDesTrousDeVentilation.setText("Hauteur des trous de ventilation");
        lblHauteurDesTrousDeVentilation.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout panelProprietes2Layout = new javax.swing.GroupLayout(panelProprietes2);
        panelProprietes2.setLayout(panelProprietes2Layout);
        panelProprietes2Layout.setHorizontalGroup(
            panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProprietes2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerAnglePlisSoudure, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblLongueur2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerLongueurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerLongueurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionLongueur, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(cbxLongueurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblLargeur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerLargeurePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerLargeureNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionLargeur, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(cbxLargeurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblHauteur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerHauteurMurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerHauteurMurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionHauteur, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(cbxHauteurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblEpaisseurMur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMargePlis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDistanceSolRetourAir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDistanceSolRetourAir1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHauteurRetourAir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMargeSoudure, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerEpaisseurMurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(spinnerEpaisseurMurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionEpaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(cbxEpaisseurMurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerMargePlisPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerMargePlisNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionMargePlis, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxMargePlisDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerMargeSoudurePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerMargeSoudureNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionMargePlis1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxMargeSoudureDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerHauteurRetourAirPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerHauteurRetourAirNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionHauteurRetourAir, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxHauteurRetourAirDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerDistanceSolRetourAirPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerDistanceSolRetourAirNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionDistanceSolRetourAir, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxDistanceSolRetourAirDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMargeDesFenetres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerMargeDesFenetresPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerMargeDesFenetresNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionMargeDesFenetres, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxMargeDesFenetresDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblHauteurDesTrousDeVentilation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelProprietes2Layout.createSequentialGroup()
                        .addComponent(spinnerHauteurDesTrousDeVentilationPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerHauteurDesTrousDeVentilationNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionHauteurDesTrousDeVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxHauteurDesTrousDeVentilationDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelProprietes2Layout.setVerticalGroup(
            panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProprietes2Layout.createSequentialGroup()
                .addComponent(lblLongueur2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerLongueurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerLongueurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBarreDivisionLongueur))
                    .addComponent(cbxLongueurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLargeur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerLargeurePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerLargeureNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxLargeurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBarreDivisionLargeur)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHauteur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerHauteurMurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerHauteurMurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionHauteur)
                    .addComponent(cbxHauteurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEpaisseurMur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerEpaisseurMurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerEpaisseurMurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxEpaisseurMurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionEpaisseurMur))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMargePlis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerMargePlisPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerMargePlisNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMargePlisDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionMargePlis))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMargeSoudure)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerMargeSoudurePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerMargeSoudureNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMargeSoudureDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionMargePlis1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHauteurRetourAir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerHauteurRetourAirPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerHauteurRetourAirNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxHauteurRetourAirDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionHauteurRetourAir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDistanceSolRetourAir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerDistanceSolRetourAirPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxDistanceSolRetourAirDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerDistanceSolRetourAirNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionDistanceSolRetourAir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDistanceSolRetourAir1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerAnglePlisSoudure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMargeDesFenetres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerMargeDesFenetresPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMargeDesFenetresDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerMargeDesFenetresNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionMargeDesFenetres))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHauteurDesTrousDeVentilation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProprietes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerHauteurDesTrousDeVentilationPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxHauteurDesTrousDeVentilationDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerHauteurDesTrousDeVentilationNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionHauteurDesTrousDeVentilation))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelProprieteDeSalleLayout = new javax.swing.GroupLayout(panelProprieteDeSalle);
        panelProprieteDeSalle.setLayout(panelProprieteDeSalleLayout);
        panelProprieteDeSalleLayout.setHorizontalGroup(
            panelProprieteDeSalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProprieteDeSalleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProprieteDeSalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelProprieteDeSalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelProprietes2, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelProprieteDeSalleLayout.setVerticalGroup(
            panelProprieteDeSalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProprieteDeSalleLayout.createSequentialGroup()
                .addComponent(labelProprieteDeSalle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelProprietes2, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelVueGrillePropriete.setBackground(new java.awt.Color(0, 0, 0));
        panelVueGrillePropriete.setMinimumSize(new java.awt.Dimension(100, 500));
        panelVueGrillePropriete.setPreferredSize(new java.awt.Dimension(312, 500));

        labelProprieteSelection.setForeground(new java.awt.Color(255, 255, 255));
        labelProprieteSelection.setText("Propriétés de la sélection");
        labelProprieteSelection.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        panelVuesGenerales.setBackground(new java.awt.Color(0, 0, 0));
        panelVuesGenerales.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        panelVuesGenerales.setMaximumSize(new java.awt.Dimension(160, 185));
        panelVuesGenerales.setPreferredSize(new java.awt.Dimension(160, 185));

        comboBoxTypeDeVue.setBackground(new java.awt.Color(0, 0, 0));
        comboBoxTypeDeVue.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxTypeDeVue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vue en plan", "Vue en élévation", "Vue d'un panneau" }));
        comboBoxTypeDeVue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTypeDeVueActionPerformed(evt);
            }
        });

        comboBoxOrientation.setBackground(new java.awt.Color(0, 0, 0));
        comboBoxOrientation.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxOrientation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nord", "Sud", "Est", "Ouest" }));
        comboBoxOrientation.setEnabled(false);
        comboBoxOrientation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxOrientationActionPerformed(evt);
            }
        });

        buttonInterieurExterieur.setText("Exterieur");
        buttonInterieurExterieur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInterieurExterieurActionPerformed(evt);
            }
        });

        cbxPanneauNumero.setBackground(new java.awt.Color(0, 0, 0));
        cbxPanneauNumero.setForeground(new java.awt.Color(255, 255, 255));
        cbxPanneauNumero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Panneau 1" }));
        cbxPanneauNumero.setEnabled(false);
        cbxPanneauNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPanneauNumeroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelVuesGeneralesLayout = new javax.swing.GroupLayout(panelVuesGenerales);
        panelVuesGenerales.setLayout(panelVuesGeneralesLayout);
        panelVuesGeneralesLayout.setHorizontalGroup(
            panelVuesGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVuesGeneralesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVuesGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonInterieurExterieur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxTypeDeVue, 0, 200, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVuesGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboBoxOrientation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxPanneauNumero, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelVuesGeneralesLayout.setVerticalGroup(
            panelVuesGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVuesGeneralesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVuesGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxTypeDeVue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxOrientation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelVuesGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonInterieurExterieur)
                    .addComponent(cbxPanneauNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        panelObjetsSelectionnes.setBackground(new java.awt.Color(0, 0, 0));
        panelObjetsSelectionnes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        panelObjetsSelectionnes.setMaximumSize(new java.awt.Dimension(300, 32767));
        panelObjetsSelectionnes.setMinimumSize(new java.awt.Dimension(300, 100));
        panelObjetsSelectionnes.setPreferredSize(new java.awt.Dimension(300, 309));
        panelObjetsSelectionnes.setLayout(new java.awt.CardLayout());

        panelMurSelectionne.setBackground(new java.awt.Color(0, 0, 0));
        panelMurSelectionne.setMaximumSize(new java.awt.Dimension(290, 32767));
        panelMurSelectionne.setPreferredSize(new java.awt.Dimension(290, 307));

        lblLargeurMur.setForeground(new java.awt.Color(255, 255, 255));
        lblLargeurMur.setText("Largeure extérieure du mur");
        lblLargeurMur.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerLargeurMurPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerLargeurMurPartieEntiere.setEnabled(false);

        spinnerLargeurMurNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerLargeurMurNumerateur.setEnabled(false);

        cbxLargeurMurDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxLargeurMurDenominateur.setEnabled(false);
        cbxLargeurMurDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionLargeurMur.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionLargeurMur.setText("/");

        javax.swing.GroupLayout panelMurSelectionneLayout = new javax.swing.GroupLayout(panelMurSelectionne);
        panelMurSelectionne.setLayout(panelMurSelectionneLayout);
        panelMurSelectionneLayout.setHorizontalGroup(
            panelMurSelectionneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMurSelectionneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMurSelectionneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLargeurMur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelMurSelectionneLayout.createSequentialGroup()
                        .addComponent(spinnerLargeurMurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(spinnerLargeurMurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionLargeurMur, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(cbxLargeurMurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8))
        );
        panelMurSelectionneLayout.setVerticalGroup(
            panelMurSelectionneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMurSelectionneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLargeurMur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMurSelectionneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMurSelectionneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerLargeurMurPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerLargeurMurNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelMurSelectionneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxLargeurMurDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBarreDivisionLargeurMur)))
                .addContainerGap(201, Short.MAX_VALUE))
        );

        panelObjetsSelectionnes.add(panelMurSelectionne, "card2");

        panelSeparateurX.setBackground(new java.awt.Color(0, 0, 0));
        panelSeparateurX.setMaximumSize(new java.awt.Dimension(290, 32767));
        panelSeparateurX.setPreferredSize(new java.awt.Dimension(290, 307));

        lblSeparateurX.setForeground(new java.awt.Color(255, 255, 255));
        lblSeparateurX.setText("Coordonnée en X");
        lblSeparateurX.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerSeparateurPositionXPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        labelBarreDivisionCoordonneX.setBackground(new java.awt.Color(0, 0, 0));
        labelBarreDivisionCoordonneX.setForeground(new java.awt.Color(255, 255, 255));
        labelBarreDivisionCoordonneX.setText("/");

        cbxSeparateurPositionXDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));

        javax.swing.GroupLayout panelSeparateurXLayout = new javax.swing.GroupLayout(panelSeparateurX);
        panelSeparateurX.setLayout(panelSeparateurXLayout);
        panelSeparateurXLayout.setHorizontalGroup(
            panelSeparateurXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSeparateurXLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSeparateurXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSeparateurXLayout.createSequentialGroup()
                        .addComponent(spinnerSeparateurPositionXPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(spinnerSeparateurPositionXNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelBarreDivisionCoordonneX, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxSeparateurPositionXDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(lblSeparateurX, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelSeparateurXLayout.setVerticalGroup(
            panelSeparateurXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSeparateurXLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSeparateurX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSeparateurXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerSeparateurPositionXPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerSeparateurPositionXNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBarreDivisionCoordonneX, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxSeparateurPositionXDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        panelObjetsSelectionnes.add(panelSeparateurX, "card3");

        panelSeparateurY.setBackground(new java.awt.Color(0, 0, 0));
        panelSeparateurY.setMaximumSize(new java.awt.Dimension(290, 32767));
        panelSeparateurY.setPreferredSize(new java.awt.Dimension(290, 307));

        lblSeparateurY.setForeground(new java.awt.Color(255, 255, 255));
        lblSeparateurY.setText("Coordonnée en Y");
        lblSeparateurY.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerSeparateurPositionYPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        labelBarreDivisionCoordonneY.setBackground(new java.awt.Color(0, 0, 0));
        labelBarreDivisionCoordonneY.setForeground(new java.awt.Color(255, 255, 255));
        labelBarreDivisionCoordonneY.setText("/");

        cbxSeparateurPositionYDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));

        javax.swing.GroupLayout panelSeparateurYLayout = new javax.swing.GroupLayout(panelSeparateurY);
        panelSeparateurY.setLayout(panelSeparateurYLayout);
        panelSeparateurYLayout.setHorizontalGroup(
            panelSeparateurYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSeparateurYLayout.createSequentialGroup()
                .addGroup(panelSeparateurYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSeparateurYLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblSeparateurY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelSeparateurYLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(spinnerSeparateurPositionYPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(spinnerSeparateurPositionYNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelBarreDivisionCoordonneY, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxSeparateurPositionYDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelSeparateurYLayout.setVerticalGroup(
            panelSeparateurYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSeparateurYLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSeparateurY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSeparateurYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerSeparateurPositionYPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerSeparateurPositionYNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBarreDivisionCoordonneY, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxSeparateurPositionYDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        panelObjetsSelectionnes.add(panelSeparateurY, "card4");

        panelAccessoires.setBackground(new java.awt.Color(0, 0, 0));
        panelAccessoires.setMaximumSize(new java.awt.Dimension(290, 32767));
        panelAccessoires.setPreferredSize(new java.awt.Dimension(290, 307));

        lblLargeurAccesssoire.setForeground(new java.awt.Color(255, 255, 255));
        lblLargeurAccesssoire.setText("Largeur");
        lblLargeurAccesssoire.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerLargeurAccessoirePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerLargeurAccessoirePartieEntiere.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLargeurAccessoirePartieEntiereStateChanged(evt);
            }
        });

        spinnerLargeurAccessoireNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerLargeurAccessoireNumerateur.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLargeurAccessoireNumerateurStateChanged(evt);
            }
        });

        cbxLargeurAccessoireDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxLargeurAccessoireDenominateur.setVerifyInputWhenFocusTarget(false);
        cbxLargeurAccessoireDenominateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLargeurAccessoireDenominateurActionPerformed(evt);
            }
        });

        lblBarreDivisionLargeurAccessoire.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionLargeurAccessoire.setText("/");

        lblHauteurAccesssoire.setForeground(new java.awt.Color(255, 255, 255));
        lblHauteurAccesssoire.setText("Hauteur");
        lblHauteurAccesssoire.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerHauteurAccessoirePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerHauteurAccessoirePartieEntiere.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerHauteurAccessoirePartieEntiereStateChanged(evt);
            }
        });

        spinnerHauteurAccessoireNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerHauteurAccessoireNumerateur.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerHauteurAccessoireNumerateurStateChanged(evt);
            }
        });

        cbxHauteurAccessoireDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxHauteurAccessoireDenominateur.setVerifyInputWhenFocusTarget(false);
        cbxHauteurAccessoireDenominateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxHauteurAccessoireDenominateurActionPerformed(evt);
            }
        });

        lblBarreDivisionHauteurAccessoire.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionHauteurAccessoire.setText("/");

        lblMargeAccesssoire.setForeground(new java.awt.Color(255, 255, 255));
        lblMargeAccesssoire.setText("Coordonne en X");
        lblMargeAccesssoire.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerCoordonneeXAccessoirePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerCoordonneeXAccessoirePartieEntiere.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCoordonneeXAccessoirePartieEntiereStateChanged(evt);
            }
        });

        spinnerCoordonneeXAccessoireNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerCoordonneeXAccessoireNumerateur.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCoordonneeXAccessoireNumerateurStateChanged(evt);
            }
        });

        cbxCoordonneeXAccessoireDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxCoordonneeXAccessoireDenominateur.setVerifyInputWhenFocusTarget(false);
        cbxCoordonneeXAccessoireDenominateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCoordonneeXAccessoireDenominateurActionPerformed(evt);
            }
        });

        lblBarreDivisionMargeAccessoire.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionMargeAccessoire.setText("/");

        lblCoordonneeAccesssoireX.setForeground(new java.awt.Color(255, 255, 255));
        lblCoordonneeAccesssoireX.setText("Coordonnée en Y");
        lblCoordonneeAccesssoireX.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerCoordonneeYAccessoirePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerCoordonneeYAccessoirePartieEntiere.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCoordonneeYAccessoirePartieEntiereStateChanged(evt);
            }
        });

        spinnerCoordonneeYAccessoireNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerCoordonneeYAccessoireNumerateur.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCoordonneeYAccessoireNumerateurStateChanged(evt);
            }
        });

        lblBarreDivisionMargeAccessoire1.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionMargeAccessoire1.setText("/");

        cbxCoordonneeYAccessoireDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxCoordonneeYAccessoireDenominateur.setVerifyInputWhenFocusTarget(false);
        cbxCoordonneeYAccessoireDenominateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCoordonneeYAccessoireDenominateurActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAccessoiresLayout = new javax.swing.GroupLayout(panelAccessoires);
        panelAccessoires.setLayout(panelAccessoiresLayout);
        panelAccessoiresLayout.setHorizontalGroup(
            panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccessoiresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAccessoiresLayout.createSequentialGroup()
                        .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLargeurAccesssoire, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelAccessoiresLayout.createSequentialGroup()
                                .addComponent(spinnerLargeurAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinnerLargeurAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBarreDivisionLargeurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(cbxLargeurAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblHauteurAccesssoire, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelAccessoiresLayout.createSequentialGroup()
                                .addComponent(spinnerHauteurAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinnerHauteurAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBarreDivisionHauteurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(cbxHauteurAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMargeAccesssoire, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelAccessoiresLayout.createSequentialGroup()
                                .addComponent(spinnerCoordonneeXAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinnerCoordonneeXAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBarreDivisionMargeAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(cbxCoordonneeXAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblCoordonneeAccesssoireX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addGroup(panelAccessoiresLayout.createSequentialGroup()
                        .addComponent(spinnerCoordonneeYAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(spinnerCoordonneeYAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionMargeAccessoire1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxCoordonneeYAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        panelAccessoiresLayout.setVerticalGroup(
            panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccessoiresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLargeurAccesssoire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerLargeurAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerLargeurAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxLargeurAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBarreDivisionLargeurAccessoire)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHauteurAccesssoire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerHauteurAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerHauteurAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxHauteurAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBarreDivisionHauteurAccessoire)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMargeAccesssoire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerCoordonneeXAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerCoordonneeXAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxCoordonneeXAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBarreDivisionMargeAccessoire)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCoordonneeAccesssoireX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAccessoiresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerCoordonneeYAccessoirePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerCoordonneeYAccessoireNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionMargeAccessoire1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxCoordonneeYAccessoireDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        panelObjetsSelectionnes.add(panelAccessoires, "card5");

        panelRetourAir.setBackground(new java.awt.Color(0, 0, 0));
        panelRetourAir.setMaximumSize(new java.awt.Dimension(290, 32767));
        panelRetourAir.setPreferredSize(new java.awt.Dimension(290, 307));

        lblLargeurMur1.setForeground(new java.awt.Color(255, 255, 255));
        lblLargeurMur1.setText("Largeure de retour d'air");
        lblLargeurMur1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerLargeurRetourAirPartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerLargeurRetourAirPartieEntiere.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLargeurRetourAirPartieEntiereStateChanged(evt);
            }
        });

        spinnerLargeurRetourAirNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerLargeurRetourAirNumerateur.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLargeurRetourAirNumerateurStateChanged(evt);
            }
        });

        cbxLargeurRetourAirDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxLargeurRetourAirDenominateur.setVerifyInputWhenFocusTarget(false);
        cbxLargeurRetourAirDenominateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLargeurRetourAirDenominateurActionPerformed(evt);
            }
        });

        lblBarreDivisionLargeurRetourAir.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionLargeurRetourAir.setText("/");

        javax.swing.GroupLayout panelRetourAirLayout = new javax.swing.GroupLayout(panelRetourAir);
        panelRetourAir.setLayout(panelRetourAirLayout);
        panelRetourAirLayout.setHorizontalGroup(
            panelRetourAirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRetourAirLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRetourAirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLargeurMur1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelRetourAirLayout.createSequentialGroup()
                        .addComponent(spinnerLargeurRetourAirPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(spinnerLargeurRetourAirNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionLargeurRetourAir, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(cbxLargeurRetourAirDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8))
        );
        panelRetourAirLayout.setVerticalGroup(
            panelRetourAirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRetourAirLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLargeurMur1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRetourAirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRetourAirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerLargeurRetourAirPartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerLargeurRetourAirNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelRetourAirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxLargeurRetourAirDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBarreDivisionLargeurRetourAir)))
                .addContainerGap(201, Short.MAX_VALUE))
        );

        panelObjetsSelectionnes.add(panelRetourAir, "card2");

        panelGrille.setBackground(new java.awt.Color(0, 0, 0));
        panelGrille.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        panelMurSelectionne1.setBackground(new java.awt.Color(0, 0, 0));
        panelMurSelectionne1.setMaximumSize(new java.awt.Dimension(290, 32767));
        panelMurSelectionne1.setPreferredSize(new java.awt.Dimension(290, 307));

        labelLargeurGrille.setForeground(new java.awt.Color(255, 255, 255));
        labelLargeurGrille.setText("Largeure de la grille");
        labelLargeurGrille.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerLargeurGrillePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerLargeurGrilleNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        cbxLargeurGrilleDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxLargeurGrilleDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionLargeurMur1.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionLargeurMur1.setText("/");

        javax.swing.GroupLayout panelMurSelectionne1Layout = new javax.swing.GroupLayout(panelMurSelectionne1);
        panelMurSelectionne1.setLayout(panelMurSelectionne1Layout);
        panelMurSelectionne1Layout.setHorizontalGroup(
            panelMurSelectionne1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMurSelectionne1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMurSelectionne1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMurSelectionne1Layout.createSequentialGroup()
                        .addComponent(spinnerLargeurGrillePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(spinnerLargeurGrilleNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBarreDivisionLargeurMur1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(cbxLargeurGrilleDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelLargeurGrille, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelMurSelectionne1Layout.setVerticalGroup(
            panelMurSelectionne1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMurSelectionne1Layout.createSequentialGroup()
                .addComponent(labelLargeurGrille)
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(panelMurSelectionne1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerLargeurGrillePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerLargeurGrilleNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBarreDivisionLargeurMur1)
                    .addComponent(cbxLargeurGrilleDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelMurSelectionne2.setBackground(new java.awt.Color(0, 0, 0));
        panelMurSelectionne2.setMaximumSize(new java.awt.Dimension(290, 32767));
        panelMurSelectionne2.setPreferredSize(new java.awt.Dimension(290, 307));

        labelHauteurGrille.setForeground(new java.awt.Color(255, 255, 255));
        labelHauteurGrille.setText("Hauteur de la grille");
        labelHauteurGrille.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));

        spinnerHauteurGrillePartieEntiere.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerHauteurGrilleNumerateur.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        cbxHauteurGrilleDenominateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1000" }));
        cbxHauteurGrilleDenominateur.setVerifyInputWhenFocusTarget(false);

        lblBarreDivisionLargeurMur2.setForeground(new java.awt.Color(255, 255, 255));
        lblBarreDivisionLargeurMur2.setText("/");

        javax.swing.GroupLayout panelMurSelectionne2Layout = new javax.swing.GroupLayout(panelMurSelectionne2);
        panelMurSelectionne2.setLayout(panelMurSelectionne2Layout);
        panelMurSelectionne2Layout.setHorizontalGroup(
            panelMurSelectionne2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMurSelectionne2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMurSelectionne2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMurSelectionne2Layout.createSequentialGroup()
                        .addComponent(spinnerHauteurGrillePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(spinnerHauteurGrilleNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(lblBarreDivisionLargeurMur2, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxHauteurGrilleDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelHauteurGrille, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelMurSelectionne2Layout.setVerticalGroup(
            panelMurSelectionne2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMurSelectionne2Layout.createSequentialGroup()
                .addComponent(labelHauteurGrille)
                .addGroup(panelMurSelectionne2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMurSelectionne2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelMurSelectionne2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerHauteurGrillePartieEntiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerHauteurGrilleNumerateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBarreDivisionLargeurMur2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMurSelectionne2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxHauteurGrilleDenominateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelGrilleLayout = new javax.swing.GroupLayout(panelGrille);
        panelGrille.setLayout(panelGrilleLayout);
        panelGrilleLayout.setHorizontalGroup(
            panelGrilleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMurSelectionne1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
            .addComponent(panelMurSelectionne2, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
        );
        panelGrilleLayout.setVerticalGroup(
            panelGrilleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGrilleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelMurSelectionne1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMurSelectionne2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout panelVueGrilleProprieteLayout = new javax.swing.GroupLayout(panelVueGrillePropriete);
        panelVueGrillePropriete.setLayout(panelVueGrilleProprieteLayout);
        panelVueGrilleProprieteLayout.setHorizontalGroup(
            panelVueGrilleProprieteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVueGrilleProprieteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVueGrilleProprieteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelGrille, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelObjetsSelectionnes, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(panelVuesGenerales, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(labelProprieteSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelVueGrilleProprieteLayout.setVerticalGroup(
            panelVueGrilleProprieteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVueGrilleProprieteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelVuesGenerales, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelGrille, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelProprieteSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelObjetsSelectionnes, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        scrollingPaneDrawingPanel.setBackground(new java.awt.Color(0, 0, 0));
        scrollingPaneDrawingPanel.setForeground(new java.awt.Color(255, 255, 255));
        scrollingPaneDrawingPanel.setMaximumSize(new java.awt.Dimension(1000, 1000));
        scrollingPaneDrawingPanel.setMinimumSize(new java.awt.Dimension(16, 300));
        scrollingPaneDrawingPanel.setPreferredSize(new java.awt.Dimension(1000, 1000));

        drawingPanel.setBackground(new java.awt.Color(0, 0, 0));
        drawingPanel.setMaximumSize(new java.awt.Dimension(1000, 1000));
        drawingPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanelMouseDragged(evt);
            }
        });
        drawingPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                drawingPanelMouseWheelMoved(evt);
            }
        });
        drawingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );

        scrollingPaneDrawingPanel.setViewportView(drawingPanel);

        errorMessage.setEditable(false);
        errorMessage.setBackground(new java.awt.Color(0, 0, 0));
        errorMessage.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        errorMessage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        errorMessage.setForeground(new java.awt.Color(255, 0, 0));
        errorMessage.setText("ERREUR");
        errorMessage.setMaximumSize(new java.awt.Dimension(300, 50));
        errorMessage.setMinimumSize(new java.awt.Dimension(300, 50));
        errorMessage.setOpaque(false);
        errorMessage.setPreferredSize(new java.awt.Dimension(300, 500));

        javax.swing.GroupLayout panelDeDrawingLayout = new javax.swing.GroupLayout(panelDeDrawing);
        panelDeDrawing.setLayout(panelDeDrawingLayout);
        panelDeDrawingLayout.setHorizontalGroup(
            panelDeDrawingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeDrawingLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(panelProprieteDeSalle, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollingPaneDrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDeDrawingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelVueGrillePropriete, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addComponent(errorMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelDeDrawingLayout.setVerticalGroup(
            panelDeDrawingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeDrawingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDeDrawingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollingPaneDrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelProprieteDeSalle, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDeDrawingLayout.createSequentialGroup()
                        .addComponent(panelVueGrillePropriete, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(errorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );

        panelVueDeProjet.add(panelDeDrawing, "card2");

        getContentPane().add(panelVueDeProjet, "card3");

        barMenu.setBackground(new java.awt.Color(158, 173, 186));
        barMenu.setMaximumSize(new java.awt.Dimension(389, 25));

        menuFichier.setText("Fichier");

        menuNouveauProjet.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuNouveauProjet.setBackground(new java.awt.Color(158, 173, 186));
        menuNouveauProjet.setText("Nouveau projet");
        menuNouveauProjet.setEnabled(false);
        menuNouveauProjet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNouveauProjetActionPerformed(evt);
            }
        });
        menuFichier.add(menuNouveauProjet);

        menuEnregistrerProjet.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuEnregistrerProjet.setBackground(new java.awt.Color(158, 173, 186));
        menuEnregistrerProjet.setText("Enregistrer le projet");
        menuEnregistrerProjet.setEnabled(false);
        menuEnregistrerProjet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEnregistrerProjetActionPerformed(evt);
            }
        });
        menuFichier.add(menuEnregistrerProjet);

        exporterFichier.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exporterFichier.setBackground(new java.awt.Color(158, 173, 186));
        exporterFichier.setText("Exporter le panneau");
        exporterFichier.setEnabled(false);
        exporterFichier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporterFichierActionPerformed(evt);
            }
        });
        menuFichier.add(exporterFichier);

        menuQuitter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuQuitter.setBackground(new java.awt.Color(158, 173, 186));
        menuQuitter.setText("Quitter");
        menuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitterActionPerformed(evt);
            }
        });
        menuFichier.add(menuQuitter);

        barMenu.add(menuFichier);

        menuEditer.setText("Editer");

        menuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuUndo.setBackground(new java.awt.Color(158, 173, 186));
        menuUndo.setText("Undo");
        menuUndo.setEnabled(false);
        menuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUndoActionPerformed(evt);
            }
        });
        menuEditer.add(menuUndo);

        menuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuRedo.setBackground(new java.awt.Color(158, 173, 186));
        menuRedo.setText("Redo");
        menuRedo.setEnabled(false);
        menuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRedoActionPerformed(evt);
            }
        });
        menuEditer.add(menuRedo);

        barMenu.add(menuEditer);

        menuVues.setText("Vues");

        menuVueEnPlan.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuVueEnPlan.setBackground(new java.awt.Color(158, 173, 186));
        menuVueEnPlan.setText("Vue en plan");
        menuVueEnPlan.setEnabled(false);
        menuVueEnPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueEnPlanActionPerformed(evt);
            }
        });
        menuVues.add(menuVueEnPlan);

        menuVueEnElevation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuVueEnElevation.setBackground(new java.awt.Color(158, 173, 186));
        menuVueEnElevation.setText("Vue en élévation");
        menuVueEnElevation.setEnabled(false);
        menuVueEnElevation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueEnElevationActionPerformed(evt);
            }
        });
        menuVues.add(menuVueEnElevation);

        menuVueDeMur.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuVueDeMur.setBackground(new java.awt.Color(158, 173, 186));
        menuVueDeMur.setText("Vue d'un mur");
        menuVueDeMur.setEnabled(false);
        menuVueDeMur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueDeMurActionPerformed(evt);
            }
        });
        menuVues.add(menuVueDeMur);

        menuVueDePanneau.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuVueDePanneau.setBackground(new java.awt.Color(158, 173, 186));
        menuVueDePanneau.setText("Vue d'un panneau");
        menuVueDePanneau.setEnabled(false);
        menuVueDePanneau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueDePanneauActionPerformed(evt);
            }
        });
        menuVues.add(menuVueDePanneau);

        barMenu.add(menuVues);

        menuInserer.setText("Insérer");

        menuAccessoire.setBackground(new java.awt.Color(158, 173, 186));
        menuAccessoire.setText("Accessoire");
        menuAccessoire.setToolTipText("");
        menuAccessoire.setEnabled(false);

        ajouterFenetre.setText("Fenêtre");
        ajouterFenetre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterFenetreActionPerformed(evt);
            }
        });
        menuAccessoire.add(ajouterFenetre);

        ajouterPorte.setText("Porte");
        ajouterPorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterPorteActionPerformed(evt);
            }
        });
        menuAccessoire.add(ajouterPorte);

        ajouterPriseElectrique.setText("Prise Électrique");
        ajouterPriseElectrique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterPriseElectriqueActionPerformed(evt);
            }
        });
        menuAccessoire.add(ajouterPriseElectrique);

        ajouterRetourAir.setText("Retour d'air");
        ajouterRetourAir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterRetourAirActionPerformed(evt);
            }
        });
        menuAccessoire.add(ajouterRetourAir);

        menuInserer.add(menuAccessoire);

        barMenu.add(menuInserer);

        menuOutils.setBackground(new java.awt.Color(158, 173, 186));
        menuOutils.setText("Outils");

        menuAfficherGrille.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuAfficherGrille.setBackground(new java.awt.Color(158, 173, 186));
        menuAfficherGrille.setText("Afficher la grille");
        menuAfficherGrille.setEnabled(false);
        menuAfficherGrille.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAfficherGrilleActionPerformed(evt);
            }
        });
        menuOutils.add(menuAfficherGrille);

        barMenu.add(menuOutils);

        menuAide.setText("Aide");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setBackground(new java.awt.Color(158, 173, 186));
        jMenuItem2.setText("À propos");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuAide.add(jMenuItem2);

        barMenu.add(menuAide);

        menuSupprimer.setText("Supprimer");

        supprimerSelection.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        supprimerSelection.setBackground(new java.awt.Color(158, 173, 186));
        supprimerSelection.setText("Supprimer Selection");
        supprimerSelection.setEnabled(false);
        supprimerSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerSelectionActionPerformed(evt);
            }
        });
        menuSupprimer.add(supprimerSelection);

        barMenu.add(menuSupprimer);

        setJMenuBar(barMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void effacerLeLayout() {
        // Le but de la fonction est de remettre le JFrame à neuf.
        panelInitialisationDeProjet.removeAll();
        panelInitialisationDeProjet.repaint();
        panelInitialisationDeProjet.revalidate();
    }
    
    public void construireNouvelleSalle() throws IllegalArgumentException {        
        FractionImperialeDTO[] mesuresDeSalle = getMesuresSalle();
        
        double angleDesPlisDeSoudure = (Double) comboBoxAnglePlisDeSoudure.getValue();
                        
        salleControlleur.construireSalle(mesuresDeSalle[0], mesuresDeSalle[1], mesuresDeSalle[2], mesuresDeSalle[3], 
                mesuresDeSalle[4],mesuresDeSalle[5], mesuresDeSalle[6], mesuresDeSalle[7],angleDesPlisDeSoudure, mesuresDeSalle[8]);
    }
    
    public void mettreAjourPanelProprietesSalle() {
        // 1. Chercher les valeures du controlleur.
        FractionImperialeDTO longueurSalle = salleControlleur.getLongueurSalle();
        FractionImperialeDTO largeurSalle = salleControlleur.getLargeurSalle();
        FractionImperialeDTO hateurDesMurs = salleControlleur.getHauteurMurs();
        FractionImperialeDTO epaisseurDesMurs = salleControlleur.getEpaisseurDesMurs();
        FractionImperialeDTO margeDesPlis = salleControlleur.getMargeDesPlis();
        FractionImperialeDTO margeDeSoudure = salleControlleur.getMargeDesSoudures();
        FractionImperialeDTO hauteurRetourAir = salleControlleur.getHauteurDesRetoursAir();
        FractionImperialeDTO margeDesFenetres = salleControlleur.getMargeDesFenetres();
        FractionImperialeDTO distanceSolRetourAir;
        FractionImperialeDTO largeurGrille = salleControlleur.getLargeurGrille();
        FractionImperialeDTO hauteurGrille = salleControlleur.getHauteurGrille();
        double anglePlisSoudure = salleControlleur.getAngleDesSoudures();
        
        
        // 2. Mettre à jour le pannel et ses proprietes.
        spinnerLongueurPartieEntiere.setValue(longueurSalle.partieEntiere);
        spinnerLongueurNumerateur.setValue(longueurSalle.numerateur);
        cbxLongueurDenominateur.setSelectedItem(Integer.toString(longueurSalle.denominateur));
        
        spinnerLargeurePartieEntiere.setValue(largeurSalle.partieEntiere);
        spinnerLargeureNumerateur.setValue(largeurSalle.numerateur);
        cbxLargeurDenominateur.setSelectedItem(Integer.toString(largeurSalle.denominateur));
        
        spinnerHauteurMurPartieEntiere.setValue(hateurDesMurs.partieEntiere);
        spinnerHauteurMurNumerateur.setValue(hateurDesMurs.numerateur);
        cbxHauteurDenominateur.setSelectedItem(Integer.toString(hateurDesMurs.denominateur));
        
        spinnerEpaisseurMurPartieEntiere.setValue(epaisseurDesMurs.partieEntiere);
        spinnerEpaisseurMurNumerateur.setValue(epaisseurDesMurs.numerateur);
        cbxEpaisseurMurDenominateur.setSelectedItem(Integer.toString(epaisseurDesMurs.denominateur));
        
        spinnerMargePlisPartieEntiere.setValue(margeDesPlis.partieEntiere);
        spinnerMargePlisNumerateur.setValue(margeDesPlis.numerateur);
        cbxMargePlisDenominateur.setSelectedItem(Integer.toString(margeDesPlis.denominateur));
        
        spinnerMargeSoudurePartieEntiere.setValue(margeDeSoudure.partieEntiere);
        spinnerMargeSoudureNumerateur.setValue(margeDeSoudure.numerateur);        
        cbxMargeSoudureDenominateur.setSelectedItem(Integer.toString(margeDeSoudure.denominateur));

        spinnerHauteurRetourAirPartieEntiere.setValue(hauteurRetourAir.partieEntiere);
        spinnerHauteurRetourAirNumerateur.setValue(hauteurRetourAir.numerateur);
        cbxHauteurRetourAirDenominateur.setSelectedItem(Integer.toString(hauteurRetourAir.denominateur));
        
        spinnerAnglePlisSoudure.setValue(anglePlisSoudure);
        
        spinnerMargeDesFenetresPartieEntiere.setValue(margeDesFenetres.partieEntiere);
        spinnerMargeDesFenetresNumerateur.setValue(margeDesFenetres.numerateur);
        cbxMargeDesFenetresDenominateur.setSelectedItem(Integer.toString(margeDesFenetres.denominateur));
        
        spinnerLargeurGrillePartieEntiere.setValue(largeurGrille.partieEntiere);
        spinnerLargeurGrilleNumerateur.setValue(largeurGrille.numerateur);
        cbxLargeurGrilleDenominateur.setSelectedItem(Integer.toString(largeurGrille.denominateur));
        
        spinnerHauteurGrillePartieEntiere.setValue(hauteurGrille.partieEntiere);
        spinnerHauteurGrilleNumerateur.setValue(hauteurGrille.numerateur);
        cbxHauteurGrilleDenominateur.setSelectedItem(hauteurGrille.denominateur);
    }
    
    public void creerNouveauProjet() {
        // 1. Disable tous les éléments nécessaires de la bar de menu.
        menuEnregistrerProjet.setEnabled(false);
        exporterFichier.setEnabled(false);
        menuUndo.setEnabled(false);
        menuRedo.setEnabled(false);
        menuVueEnPlan.setEnabled(false);
        menuVueDeMur.setEnabled(false);
        menuAfficherGrille.setEnabled(false);
        menuVueEnElevation.setEnabled(false);
        menuVueDePanneau.setEnabled(false);
        menuNouveauProjet.setEnabled(false);
        menuAccessoire.setEnabled(false);
        supprimerSelection.setEnabled(false);
        
        // 1.1 Effacer les events listeners pour eviter des memory leaks.
        // ETRE CERTAINS DE CLEANER LES LISTENERS AVANT D'EN RAJOUTER SINON MEMORY LEAK.
        effacerEventListenersSpinnersEtComboboxes();
        
        // 2. Effacer le layout et ramener à la page initiale du projet.
        dialogNouveauProjet.setVisible(false);
        
        panelInitialisationDeProjet.removeAll();
        panelInitialisationDeProjet.repaint();
        panelInitialisationDeProjet.revalidate();
        
        getContentPane().removeAll();
        getContentPane().repaint();
        getContentPane().revalidate();
        
        panelInitialisationDeProjet.add(panelInitial);
        getContentPane().add(panelInitialisationDeProjet);
    }
    
    private void bouttonNouveauProjetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouttonNouveauProjetActionPerformed
        effacerLeLayout();
        
        // 1. Créer une nouvelle configuration pour l'utilisateur.
        salleControlleur.ajouterConfiguration();
        Configuration config = salleControlleur.getConfiguration();
        
        // 2. Mettre à jour les textes dans les textFields.
        textNomDuProjet.setText(config.getProjectName());
        textCheminDeSauvegarde.setText(config.getStorePath());
        textCheminEnregistrement.setText(config.getCheminTotalDeSauvegarde());
        
        // 3. Ajouter le panel de création de projet.
        panelInitialisationDeProjet.add(panelNouveauProjetEtapeUn);
        panelInitialisationDeProjet.repaint();
        panelInitialisationDeProjet.revalidate();
    }//GEN-LAST:event_bouttonNouveauProjetActionPerformed
    
    private void boutonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonAnnulerActionPerformed
        effacerLeLayout();
        // Cacher le panel d'erreur.
        textAreaErrorCreationProjet.setVisible(false);
        
        // Détruire l'objet configuration.
        salleControlleur.restoreDefaultConfig();
        
        // Ajouter le panel de création de projet.
        panelInitialisationDeProjet.add(panelInitial);
        panelInitialisationDeProjet.repaint();
        panelInitialisationDeProjet.revalidate();
    }//GEN-LAST:event_boutonAnnulerActionPerformed

    private void boutonAnnuler2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonAnnuler2ActionPerformed
        boutonAnnulerActionPerformed(null);
    }//GEN-LAST:event_boutonAnnuler2ActionPerformed

    private void textNomDuProjetKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNomDuProjetKeyTyped
        // Valider que les caracteres entrées seront accepté par
        // l'objet configuration du controlleur.
        char dernierCaractere = evt.getKeyChar();
        Configuration configuration = salleControlleur.getConfiguration();
        
         // Le caractère peut être un "backspace".
         // Pour chaque caractère on va valider avec la regex.
        if (Character.isISOControl(dernierCaractere) || configuration.isProjectNameValid(Character.toString(dernierCaractere))) {
            textNomDuProjet.setEditable(true);
        } else {
            textNomDuProjet.setEditable(false);
        }
    }//GEN-LAST:event_textNomDuProjetKeyTyped

    private void boutonChoisirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonChoisirActionPerformed
        // Action pour sélectionner un chemin de sauvegarde.
        Configuration configuration = salleControlleur.getConfiguration();
        javax.swing.JFileChooser fichierChooser = new javax.swing.JFileChooser();
        fichierChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fichierChooser.showOpenDialog(panelInitialisationDeProjet);
        
       // Dans le cas ou l'utilisateur a choisi un chemin de sauvegarde.
        if (fichierChooser.getSelectedFile() != null) {
            String cheminDeSauvegarde = fichierChooser.getSelectedFile().getAbsolutePath();
            
            // MAJ le chemin de sauvegarde dans la config et l'afficher dans le JTextField.
            configuration.setStorePath(cheminDeSauvegarde);
            textCheminDeSauvegarde.setText(configuration.getStorePath());
        }
        
        // Mettre à jour le textCheminEnregistrement du bas qui montre le chemin complet.
        textCheminEnregistrement.setText(configuration.getCheminTotalDeSauvegarde());
    }//GEN-LAST:event_boutonChoisirActionPerformed

    private void textNomDuProjetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNomDuProjetKeyReleased
        // Une fois que les clés sont validés, on peut chercher le texte.
       String nomDuProjetCourrant = textNomDuProjet.getText();
       Configuration configuration = salleControlleur.getConfiguration();
       
       configuration.setProjectName(nomDuProjetCourrant);
       textCheminEnregistrement.setText(configuration.getCheminTotalDeSauvegarde());
    }//GEN-LAST:event_textNomDuProjetKeyReleased

    private void boutonOuvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonOuvrirActionPerformed
        effacerLeLayout();
        
        // Ajouter le panel d'ouverture de projet.
        panelInitialisationDeProjet.add(panelOuvrirProjet);
        panelInitialisationDeProjet.repaint();
        panelInitialisationDeProjet.revalidate();
        
    }//GEN-LAST:event_boutonOuvrirActionPerformed

    private void fileChooserOuvertureInitialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserOuvertureInitialActionPerformed
        // 1. Si l'utilisateur clique sur le bouton cancel, on va retourner à la page de initiale.
        if(evt.getActionCommand() == "CancelSelection") {
            effacerLeLayout();
            
            // 1.1 Ajouter le panel d'ouverture de projet.
            panelInitialisationDeProjet.add(panelInitial);
            panelInitialisationDeProjet.repaint();
            panelInitialisationDeProjet.revalidate();
        } else if (evt.getActionCommand() == "ApproveSelection") {
            // 2. Si l'utilisateur selectionne un fichier.
            javax.swing.JFileChooser fileChooserSelection = (javax.swing.JFileChooser) evt.getSource();
            String cheminDeSauvegarde = fileChooserSelection.getSelectedFile().getAbsolutePath();
            
            try {
                // 2.1 Loader le projet dans le controlleur.
                salleControlleur.loaderProjet(cheminDeSauvegarde);
                
                // 2.2 Aller dans le panel de vue de projet.
                boutonCreer2ActionPerformed(null);
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_fileChooserOuvertureInitialActionPerformed

    private void boutonProchainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonProchainActionPerformed
        Configuration configuration = salleControlleur.getConfiguration();
        if(!configuration.isValidConfiguration()) {
            // 1. Rendre le message d'erreur visible si la configuration est invalide.
            textAreaErrorCreationProjet.setText("Nous avons eu un problème. Assurez vous que :\n"
                    + "   1) Le nom de projet n'a pas de caractères spéciaux et \n est compris entre 1 et 255 caractères.\n"
                    + "   2) Le chemin de sauvegarde existe.");
            textAreaErrorCreationProjet.setVisible(true);
            return;
        } else if (configuration.isPathExists(configuration.getCheminTotalDeSauvegarde())) {
            // 1. Rendre le message d'erreur visible si le fichier existe déjà.
            textAreaErrorCreationProjet.setText("Nous avons eu un problème. Assurez vous que :\n"
                    + "   1) Le fichier n'existe pas déjà dans votre système.");
            textAreaErrorCreationProjet.setVisible(true);
            return;
        }
        
        // 3. Effacer le message d'erreur.
        textAreaErrorCreationProjet.setVisible(false);
        
        // 4. MAJ les valeurs des textFields de l'étape 2 d'initialisation de projet.
        FractionImperialeDTO longueurSalle = salleControlleur.getLongueurSalle();
        FractionImperialeDTO largeurSalle = salleControlleur.getLargeurSalle();
        FractionImperialeDTO hateurDesMurs = salleControlleur.getHauteurMurs();
        FractionImperialeDTO epaisseurDesMurs = salleControlleur.getEpaisseurDesMurs();
        FractionImperialeDTO margeDesPlis = salleControlleur.getMargeDesPlis();
        FractionImperialeDTO margeDeSoudure = salleControlleur.getMargeDesSoudures();
        FractionImperialeDTO hauteurRetourAir = salleControlleur.getHauteurDesRetoursAir();
        FractionImperialeDTO margeDesFenetres = salleControlleur.getMargeDesFenetres();
        FractionImperialeDTO distanceSolRetourAir;
        double anglePlisSoudure = salleControlleur.getAngleDesSoudures();
        
        // 4.1 longueurSalle
        tableDesMesures.setValueAt(longueurSalle.partieEntiere, 0, 1);
        tableDesMesures.setValueAt(longueurSalle.numerateur, 0, 2);
        tableDesMesures.setValueAt(Integer.toString(longueurSalle.denominateur), 0, 3);

        // 4.2 largeureSalle
        tableDesMesures.setValueAt(largeurSalle.partieEntiere, 1, 1);
        tableDesMesures.setValueAt(largeurSalle.numerateur, 1, 2);
        tableDesMesures.setValueAt(Integer.toString(largeurSalle.denominateur), 1, 3);
        
        // 4.3 hauteurDesMurs
        tableDesMesures.setValueAt(hateurDesMurs.partieEntiere, 2, 1);
        tableDesMesures.setValueAt(hateurDesMurs.numerateur, 2, 2);
        tableDesMesures.setValueAt(Integer.toString(hateurDesMurs.denominateur), 2, 3);
        
        // 4.4 epaisseurDesMurs
        tableDesMesures.setValueAt(epaisseurDesMurs.partieEntiere, 3, 1);
        tableDesMesures.setValueAt(epaisseurDesMurs.numerateur, 3, 2);
        tableDesMesures.setValueAt(Integer.toString(epaisseurDesMurs.denominateur), 3, 3);
        
        // 4.5 margeDesPlis
        tableDesMesures.setValueAt(margeDesPlis.partieEntiere, 4, 1);
        tableDesMesures.setValueAt(margeDesPlis.numerateur, 4, 2);
        tableDesMesures.setValueAt(Integer.toString(margeDesPlis.denominateur), 4, 3);
        
        // 4.6 margeDeSoudure
        tableDesMesures.setValueAt(margeDeSoudure.partieEntiere, 5, 1);
        tableDesMesures.setValueAt(margeDeSoudure.numerateur, 5, 2);
        tableDesMesures.setValueAt(Integer.toString(margeDeSoudure.denominateur), 5, 3);
        
        // 4.7 TODO : A COMPLETER VALEURS ARBITRAIRES
        // hauteurRetourAir
        tableDesMesures.setValueAt(margeDeSoudure.partieEntiere, 6, 1);
        tableDesMesures.setValueAt(margeDeSoudure.numerateur, 6, 2);
        tableDesMesures.setValueAt(Integer.toString(margeDeSoudure.denominateur), 6, 3);
        
        // 4.8 TODO : A COMPLETER VALEURS ARBITRAIRES
        // hauteurRetourAir
        tableDesMesures.setValueAt(hauteurRetourAir.partieEntiere, 7, 1);
        tableDesMesures.setValueAt(hauteurRetourAir.numerateur, 7, 2);
        tableDesMesures.setValueAt(Integer.toString(margeDeSoudure.denominateur), 7, 3);
        
        // 4.9 angleDeSoudure
        comboBoxAnglePlisDeSoudure.setValue(anglePlisSoudure);
        
         // margeDesFenetres
        tableDesMesures.setValueAt(margeDesFenetres.partieEntiere, 8, 1);
        tableDesMesures.setValueAt(margeDesFenetres.numerateur, 8, 2);
        tableDesMesures.setValueAt(Integer.toString(margeDesFenetres.denominateur), 8, 3);
        
        // 5. Passer à la prochaine fenêtre (étape 2 de la création de projet).
        effacerLeLayout();
        panelInitialisationDeProjet.add(panelNouveauProjetEtapeDeux);
        panelInitialisationDeProjet.repaint();
        panelInitialisationDeProjet.revalidate();
    }//GEN-LAST:event_boutonProchainActionPerformed

    private void boutonPrecedent2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonPrecedent2ActionPerformed
        // Repasser à le panel de vue de l'étape 1
        effacerLeLayout();
        
        // Ajouter le panel de l'étape 1 de création de projet.
        panelInitialisationDeProjet.add(panelNouveauProjetEtapeUn);
        panelInitialisationDeProjet.repaint();
        panelInitialisationDeProjet.revalidate();
    }//GEN-LAST:event_boutonPrecedent2ActionPerformed

    private void boutonCreer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonCreer2ActionPerformed
        // 1. Valider les inputs de la table et ne pas avancer si les inputs sont invalides.
        // 1.1 Si c'est null c'est que c'est appelé de loader projet.
        if (evt != null) {
            try {
                construireNouvelleSalle();
            } catch (IllegalArgumentException e) {
                return;
            }  
        }
        
        // 2. Enable tous les éléments nécessaires de la bar de menu.
        menuAccessoire.setEnabled(false);
        menuEnregistrerProjet.setEnabled(true);
        exporterFichier.setEnabled(true);
        menuUndo.setEnabled(true);
        menuRedo.setEnabled(true);
        menuVueEnPlan.setEnabled(true);
        menuVueDeMur.setEnabled(true);
        menuAfficherGrille.setEnabled(true);
        menuVueEnElevation.setEnabled(true);
        menuVueDePanneau.setEnabled(true);
        menuNouveauProjet.setEnabled(true);
        supprimerSelection.setEnabled(true);
        
        // 3. Mettre à jour les spinners des propriétés de la salle.
        mettreAjourPanelProprietesSalle();
        
        // 4. Tout enlever de l'affichage et ajouter le panel de vue de projet.
        getContentPane().removeAll();
        getContentPane().repaint();
        getContentPane().revalidate();
        
        getContentPane().add(panelVueDeProjet);
        
        //5. Masquer panel des objets sélectionnés
        panelObjetsSelectionnes.setVisible(false);
        buttonInterieurExterieur.setVisible(false);
        
        // 6. Rajouter les event listeners a tout les spinners du panel de vue de projet.
        ajouterEventListenersSpinnersEtComboboxes();
    }//GEN-LAST:event_boutonCreer2ActionPerformed

    private void ajouterEventListenersSpinnersEtComboboxes() {
        // 1. Longueure de la salle.
        spinnerLongueurPartieEntiere.addChangeListener(longueurePartieEntiereChangeListener);
        spinnerLongueurNumerateur.addChangeListener(longueureNumerateurChangeListener);
        cbxLongueurDenominateur.addItemListener(longueureDenominateurChangeListener);
        
        // 2. Largeure de la salle.
        spinnerLargeurePartieEntiere.addChangeListener(largeurPartieEntiereChangeListener);
        spinnerLargeureNumerateur.addChangeListener(largeurNumerateurChangeListener);
        cbxLargeurDenominateur.addItemListener(largeurDenominateurChangeListener);
        
        // 3. Hauteur de la salle.
        spinnerHauteurMurPartieEntiere.addChangeListener(hateurMurPartieEntiereChangeListener);
        spinnerHauteurMurNumerateur.addChangeListener(hateurMurNumerateurChangeListener);
        cbxHauteurDenominateur.addItemListener(hateurMurDenominateurChangeListener);
        
        // 4. Epasisser des murs.
        spinnerEpaisseurMurPartieEntiere.addChangeListener(epaisseurMurPartieEntiereChangeListener);
        spinnerEpaisseurMurNumerateur.addChangeListener(epaisseurMurNumerateurChangeListener);
        cbxEpaisseurMurDenominateur.addItemListener(epaisseurMurDenominateurChangeListener);
        
        // 5. Marge des plis de la salle.
        spinnerMargePlisPartieEntiere.addChangeListener(margePlisPartieEntiereChangeListener);
        spinnerMargePlisNumerateur.addChangeListener(margePlisNumerateurChangeListener);
        cbxMargePlisDenominateur.addItemListener(margePlisDenominateurChangeListener);
        
        // 6. Marge de soudure.
        spinnerMargeSoudurePartieEntiere.addChangeListener(margeSoudurePartieEntiereChangeListener);
        spinnerMargeSoudureNumerateur.addChangeListener(margeSoudureNumerateurChangeListener);
        cbxMargeSoudureDenominateur.addItemListener(margeSoudureDenominateurChangeListener);
        
        // 7. Hauteur des retours d'airs.
        spinnerHauteurRetourAirPartieEntiere.addChangeListener(hauteurRetourAirPartieEntiereChangeListener);
        spinnerHauteurRetourAirNumerateur.addChangeListener(hauteurRetourAirNumerateurChangeListener);
        cbxHauteurRetourAirDenominateur.addItemListener(hauteurRetourAirDenominateurChangeListener);
        
        // 8. Distance du sol des retours d'airs.
        spinnerDistanceSolRetourAirPartieEntiere.addChangeListener(distanceSolReourAirPartieEntiereChangeListener);
        spinnerDistanceSolRetourAirNumerateur.addChangeListener(distanceSolReourAirNumerateurChangeListener);
        cbxDistanceSolRetourAirDenominateur.addItemListener(distanceSolReourAirDenominateurChangeListener);
        
        // 9. Angle du plis de soudure.
        spinnerAnglePlisSoudure.addChangeListener(angleSoudureChangeListener);
        
        // 10. Marge des fenetres.
        spinnerMargeDesFenetresPartieEntiere.addChangeListener(margeFenetrePartieEntiereChangeListener);
        spinnerMargeDesFenetresNumerateur.addChangeListener(margeFenetreNumerateurChangeListener);
        cbxMargeDesFenetresDenominateur.addItemListener(margeFenetreDenominateurChangeListener);
        
        // 11. Hauteur des trous de ventilation
        spinnerHauteurDesTrousDeVentilationPartieEntiere.addChangeListener(hauteurTrousVentilationPartieEntiereChangeListener);
        spinnerHauteurDesTrousDeVentilationNumerateur.addChangeListener(hauteurTrousVentilationNumerateurChangeListener);
        cbxHauteurDesTrousDeVentilationDenominateur.addItemListener(hauteurTrousVentilationDenominateurChangeListener);
        
        // 12. Largeur de la grille
        spinnerLargeurGrillePartieEntiere.addChangeListener(largeurGrillePartieEntiereChangeListener);
        spinnerLargeurGrilleNumerateur.addChangeListener(largeurGrilleNumerateurChangeListener);
        cbxLargeurGrilleDenominateur.addItemListener(largeurGrilleDenominateurChangeListener);
        
        // 13. Hauteur de la grille
        spinnerHauteurGrillePartieEntiere.addChangeListener(hauteurGrillePartieEntiereChangeListener);
        spinnerHauteurGrilleNumerateur.addChangeListener(hauteurGrilleNumerateurChangeListener);
        cbxHauteurGrilleDenominateur.addItemListener(hauteurGrilleDenominateurChangeListener);
        
        // 14. Separateurs Coordonne X
        spinnerSeparateurPositionXPartieEntiere.addChangeListener(separateurCoordonneXPartieEntiereChangeListener);
        spinnerSeparateurPositionXNumerateur.addChangeListener(separateurCoordonneXNumerateurChangeListener);
        cbxSeparateurPositionXDenominateur.addItemListener(separateurCoordonneXDenominateurChangeListener);
        
        // 15. Separateurs Coordonne Y
        spinnerSeparateurPositionYPartieEntiere.addChangeListener(separateurCoordonneYPartieEntiereChangeListener);
        spinnerSeparateurPositionYNumerateur.addChangeListener(separateurCoordonneYNumerateurChangeListener);
        cbxSeparateurPositionYDenominateur.addItemListener(separateurCoordonneYDenominateurChangeListener);
    }
    
    private void effacerEventListenersSpinnersEtComboboxes() {
        // ** Effacer les event listeneres des spinners et combobox.
        // 1. Longueure de la salle.
        spinnerLongueurPartieEntiere.removeChangeListener(longueurePartieEntiereChangeListener);
        spinnerLongueurNumerateur.removeChangeListener(longueureNumerateurChangeListener);
        cbxLongueurDenominateur.removeItemListener(longueureDenominateurChangeListener);
        
        // 2. Largeure de la salle.
        spinnerLargeurePartieEntiere.removeChangeListener(largeurPartieEntiereChangeListener);
        spinnerLargeureNumerateur.removeChangeListener(largeurNumerateurChangeListener);
        cbxLargeurDenominateur.removeItemListener(largeurDenominateurChangeListener);
        
        // 3. Hauteur de la salle.
        spinnerHauteurMurPartieEntiere.removeChangeListener(hateurMurPartieEntiereChangeListener);
        spinnerHauteurMurNumerateur.removeChangeListener(hateurMurNumerateurChangeListener);
        cbxHauteurDenominateur.removeItemListener(hateurMurDenominateurChangeListener);
        
        // 4. Epasisser des murs.
        spinnerEpaisseurMurPartieEntiere.removeChangeListener(epaisseurMurPartieEntiereChangeListener);
        spinnerEpaisseurMurNumerateur.removeChangeListener(epaisseurMurNumerateurChangeListener);
        cbxEpaisseurMurDenominateur.removeItemListener(epaisseurMurDenominateurChangeListener);
        
        // 5. Marge des plis de la salle.
        spinnerMargePlisPartieEntiere.removeChangeListener(margePlisPartieEntiereChangeListener);
        spinnerMargePlisNumerateur.removeChangeListener(margePlisNumerateurChangeListener);
        cbxMargePlisDenominateur.removeItemListener(margePlisDenominateurChangeListener);
        
        // 6. Marge de soudure.
        spinnerMargeSoudurePartieEntiere.removeChangeListener(margeSoudurePartieEntiereChangeListener);
        spinnerMargeSoudureNumerateur.removeChangeListener(margeSoudureNumerateurChangeListener);
        cbxMargeSoudureDenominateur.removeItemListener(margeSoudureDenominateurChangeListener);
        
        // 7. Hauteur des retours d'airs.
        spinnerHauteurRetourAirPartieEntiere.removeChangeListener(hauteurRetourAirPartieEntiereChangeListener);
        spinnerHauteurRetourAirNumerateur.removeChangeListener(hauteurRetourAirNumerateurChangeListener);
        cbxHauteurRetourAirDenominateur.removeItemListener(hauteurRetourAirDenominateurChangeListener);
        
        // 8. Distance du sol des retours d'airs.
        spinnerDistanceSolRetourAirPartieEntiere.removeChangeListener(distanceSolReourAirPartieEntiereChangeListener);
        spinnerDistanceSolRetourAirNumerateur.removeChangeListener(distanceSolReourAirNumerateurChangeListener);
        cbxDistanceSolRetourAirDenominateur.removeItemListener(distanceSolReourAirDenominateurChangeListener);
        
        // 9. Angle du plis de soudure.
        spinnerAnglePlisSoudure.removeChangeListener(angleSoudureChangeListener);
        
        // 10. Marge des fenetres.
        spinnerMargeDesFenetresPartieEntiere.removeChangeListener(margeFenetrePartieEntiereChangeListener);
        spinnerMargeDesFenetresNumerateur.removeChangeListener(margeFenetreNumerateurChangeListener);
        cbxMargeDesFenetresDenominateur.removeItemListener(margeFenetreDenominateurChangeListener);
        
        // 11. Hauteur des trous de ventilation
        spinnerHauteurDesTrousDeVentilationPartieEntiere.removeChangeListener(hauteurTrousVentilationPartieEntiereChangeListener);
        spinnerHauteurDesTrousDeVentilationNumerateur.removeChangeListener(hauteurTrousVentilationNumerateurChangeListener);
        cbxHauteurDesTrousDeVentilationDenominateur.removeItemListener(hauteurTrousVentilationDenominateurChangeListener);
        
        // 12. Largeur de la grille
        spinnerLargeurGrillePartieEntiere.removeChangeListener(largeurGrillePartieEntiereChangeListener);
        spinnerLargeurGrilleNumerateur.removeChangeListener(largeurGrilleNumerateurChangeListener);
        cbxLargeurGrilleDenominateur.removeItemListener(largeurDenominateurChangeListener);
        
        // 13. Hauteur de la grille
        spinnerHauteurGrillePartieEntiere.removeChangeListener(hauteurGrillePartieEntiereChangeListener);
        spinnerHauteurGrilleNumerateur.removeChangeListener(hauteurGrilleNumerateurChangeListener);
        cbxHauteurGrilleDenominateur.removeItemListener(hauteurGrilleDenominateurChangeListener);
        
        // 14. Separateurs Coordonne X
        spinnerSeparateurPositionXPartieEntiere.removeChangeListener(separateurCoordonneXPartieEntiereChangeListener);
        spinnerSeparateurPositionXNumerateur.removeChangeListener(separateurCoordonneXNumerateurChangeListener);
        cbxSeparateurPositionXDenominateur.removeItemListener(separateurCoordonneXDenominateurChangeListener);
        
        // 15. Separateurs Coordonne Y
        spinnerSeparateurPositionYPartieEntiere.removeChangeListener(separateurCoordonneYPartieEntiereChangeListener);
        spinnerSeparateurPositionYNumerateur.removeChangeListener(separateurCoordonneYNumerateurChangeListener);
        cbxSeparateurPositionYDenominateur.removeItemListener(separateurCoordonneYDenominateurChangeListener);
    }
    
    private void drawingPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMousePressed
        String vueSelectionne = (String) comboBoxTypeDeVue.getSelectedItem();
        
        Point mousePosition = evt.getPoint();
        double pointx = (double)((mousePosition.x -20 ) / drawingPanel.zoomValue);
        double pointy = (double)((mousePosition.y -20 ) / drawingPanel.zoomValue);
        
        if (evt.getButton() == 3 && drawingPanel.getCurrentVue() == PLAN){
            salleControlleur.addSeparateur(pointx, pointy);
        }
        else if (evt.getButton() == 3 
                 && drawingPanel.getCurrentVue() == Vue.ELEVATION_COTE
                 && drawingPanel.getModeAjoutFenetre() == true){
            
            salleControlleur.addFenetre(drawingPanel.getCurrentSens(), drawingPanel.getCurrentOrientation(), pointx, pointy);
            drawingPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            drawingPanel.setModeAjoutFenetre(false);
        }
        else if (evt.getButton() == 3 
                 && drawingPanel.getCurrentVue() == Vue.ELEVATION_COTE
                 && drawingPanel.getModeAjoutPorte() == true){
            
            salleControlleur.addPorte(drawingPanel.getCurrentSens(), drawingPanel.getCurrentOrientation(), pointx, pointy);
            drawingPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            drawingPanel.setModeAjoutPorte(false);
        }
        else if (evt.getButton() == 3 
                 && drawingPanel.getCurrentVue() == Vue.ELEVATION_COTE
                 && drawingPanel.getModeAjoutPriseElectrique() == true){
            
            salleControlleur.addPriseElectrique(drawingPanel.getCurrentOrientation(), pointx, pointy);
            drawingPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            drawingPanel.setModeAjoutPriseElectrique(false);
        }
        else if (evt.getButton() == 3 
                 && drawingPanel.getCurrentVue() == Vue.ELEVATION_COTE
                 && drawingPanel.getModeAjoutRetourAir() == true){
            
            salleControlleur.addRetourAir(drawingPanel.getCurrentOrientation(), pointx, pointy);
            drawingPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            drawingPanel.setModeAjoutRetourAir(false);
        }
        else{
            switch (vueSelectionne) {
                case "Vue en plan":
                    drawingPanel.setTypeSelected(salleControlleur.selectVuePlan(pointx, pointy));
                    break;
                case "Vue en élévation":
                    drawingPanel.setTypeSelected(salleControlleur.selectVueElevation(pointx, pointy, drawingPanel.getCurrentOrientation(), drawingPanel.getCurrentSens()));
                    break;
                default:
                    break;
            }
        }
        refreshSalle();
    }//GEN-LAST:event_drawingPanelMousePressed

    private void comboBoxTypeDeVueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTypeDeVueActionPerformed
        // TODO : Lorsque la vue d'un mur et d'un panneau sera disponible.
        String vueSelectionne = (String) comboBoxTypeDeVue.getSelectedItem();

        if (null != vueSelectionne) switch (vueSelectionne) {
            case "Vue en plan":
                comboBoxOrientation.setEnabled(false);
                cbxPanneauNumero.setEnabled(false);
                drawingPanel.setCurrentVue(Vue.PLAN);
                buttonInterieurExterieur.setVisible(false);
                drawingPanel.setTypeSelected(salleControlleur.unSelectAll());
                drawingPanel.setIndexPanneau(0);
                break;
            case "Vue en élévation":
                comboBoxOrientation.setEnabled(true);
                cbxPanneauNumero.setEnabled(false);
                drawingPanel.setCurrentVue(Vue.ELEVATION_COTE);
                menuAccessoire.setEnabled(true);
                buttonInterieurExterieur.setVisible(true);
                drawingPanel.setTypeSelected(salleControlleur.unSelectAll());
                drawingPanel.setIndexPanneau(0);
                break;
            case "Vue d'un panneau":
                comboBoxOrientation.setEnabled(true);
                cbxPanneauNumero.setEnabled(true);
                drawingPanel.setCurrentVue(Vue.PROFIL_DECOUPAGE);
                buttonInterieurExterieur.setVisible(true);
                drawingPanel.setTypeSelected(salleControlleur.unSelectAll());
                loadComboboxListePanneaux();
                break;
            default:
                break;
        }
        
        refreshSalle();
    }//GEN-LAST:event_comboBoxTypeDeVueActionPerformed

    private void menuVueEnPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueEnPlanActionPerformed
        // TODO : S'assurer que c'est bien propagé.
        comboBoxTypeDeVue.setSelectedIndex(0);
        
    }//GEN-LAST:event_menuVueEnPlanActionPerformed

    private void menuVueEnElevationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueEnElevationActionPerformed
        // TODO : S'assurer que c'est bien propagé.
        comboBoxTypeDeVue.setSelectedIndex(1);
    }//GEN-LAST:event_menuVueEnElevationActionPerformed

    private void menuVueDeMurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueDeMurActionPerformed
        // TODO : S'assurer que c'est bien propagé.
        comboBoxTypeDeVue.setSelectedIndex(2);
    }//GEN-LAST:event_menuVueDeMurActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        dialogaPropos.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void menuVueDePanneauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueDePanneauActionPerformed
        // TODO : S'assurer que c'est bien propagé.
        comboBoxTypeDeVue.setSelectedIndex(3);
    }//GEN-LAST:event_menuVueDePanneauActionPerformed

    private void drawingPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_drawingPanelMouseWheelMoved
        // TODO add your handling code here:
       double sensDeRotation = evt.getPreciseWheelRotation();
       Point mousePosition = evt.getPoint();
       Point currentViewPort = scrollingPaneDrawingPanel.getViewport().getViewPosition();
       int newx;// = mousePosition.x - (int)scrollingPaneDrawingPanel.getViewport().getWidth()/2;
       int newy;// = mousePosition.y - (int)scrollingPaneDrawingPanel.getViewport().getHeight()/2;
       if (sensDeRotation == 1.0) {
           newx = (int)(mousePosition.x*1.1);// - (int)scrollingPaneDrawingPanel.getViewport().getWidth()/2;
           newy = (int)(mousePosition.y*1.1);// - (int)scrollingPaneDrawingPanel.getViewport().getHeight()/2;
           drawingPanel.zoomIn();
           scrollingPaneDrawingPanel.getViewport().setViewPosition(new Point( currentViewPort.x + newx - mousePosition.x, currentViewPort.y + newy - mousePosition.y ));
       } else if (sensDeRotation == -1.0) {
           newx = (int)(mousePosition.x*0.9);// - (int)scrollingPaneDrawingPanel.getViewport().getWidth()/2;
           newy = (int)(mousePosition.y*0.9);// - (int)scrollingPaneDrawingPanel.getViewport().getHeight()/2;
           drawingPanel.zoomOut();
           scrollingPaneDrawingPanel.getViewport().setViewPosition(new Point(currentViewPort.x + newx - mousePosition.x, currentViewPort.y + newy - mousePosition.y));
       }
    }//GEN-LAST:event_drawingPanelMouseWheelMoved

    private void boutonQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonQuitterActionPerformed
        // 1. Dans le cas ou l'utilisateur veut quitter.
        System.exit(0);
    }//GEN-LAST:event_boutonQuitterActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Rediriger vers le code de menuQuitterActionPerformed:
        menuQuitterActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void comboBoxOrientationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxOrientationActionPerformed
        String vueSelectionne = (String) comboBoxOrientation.getSelectedItem();
        String typeVueSelectionne = (String)comboBoxTypeDeVue.getSelectedItem();
        if (null != vueSelectionne) switch (vueSelectionne) {
            case "Nord":
                drawingPanel.setIndexPanneau(0);
                drawingPanel.setCurrentOrientation(Orientation.NORD);
                break;
            case "Sud":
                drawingPanel.setIndexPanneau(0);
                drawingPanel.setCurrentOrientation(Orientation.SUD);
                break;
            case "Ouest":
                drawingPanel.setIndexPanneau(0);
                drawingPanel.setCurrentOrientation(Orientation.OUEST);
                break;
            case "Est":
                drawingPanel.setIndexPanneau(0);
                drawingPanel.setCurrentOrientation(Orientation.EST);
                break;
        }
        
        if(typeVueSelectionne != null && typeVueSelectionne == "Vue d'un panneau"){
            loadComboboxListePanneaux();
        }
        refreshSalle();
    }//GEN-LAST:event_comboBoxOrientationActionPerformed

    private void supprimerSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerSelectionActionPerformed
        if (drawingPanel.getTypeSelected() == 1 ||
            drawingPanel.getTypeSelected() == 2){
            salleControlleur.deleteSelectedSeparateur();
        }
        else if (drawingPanel.getTypeSelected() == 4 || drawingPanel.getTypeSelected() == 5){
            salleControlleur.deleteSelectedAccessoire();
        }
        drawingPanel.setTypeSelected(0);
        refreshSalle();
    }//GEN-LAST:event_supprimerSelectionActionPerformed

    private void boutonNonSauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonNonSauvegarderActionPerformed
        // 1.1 Remettre l'objet configuration à noeuf
        salleControlleur.restore();
        
        // 2. Retourner au panel de nouveau projet.
        creerNouveauProjet();
    }//GEN-LAST:event_boutonNonSauvegarderActionPerformed

    private void boutonOuiSauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonOuiSauvegarderActionPerformed
        // 1. Sauvegarder le projet.
        menuEnregistrerProjetActionPerformed(null);
        
        // 2. Retourner au panel de création de projet.
        creerNouveauProjet();
    }//GEN-LAST:event_boutonOuiSauvegarderActionPerformed

    private void boutonSauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonSauvegarderActionPerformed
        // 1. Sauvegarder le projet.
        menuEnregistrerProjetActionPerformed(null);

        // 2. Quitter le projet.
        System.exit(0);
    }//GEN-LAST:event_boutonSauvegarderActionPerformed

    private void menuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitterActionPerformed
        try {
            salleControlleur.fermerLogiciel();
        } catch (IllegalStateException e) {
            dialogQuitter.setVisible(true);
        }
    }//GEN-LAST:event_menuQuitterActionPerformed

    private void menuEnregistrerProjetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEnregistrerProjetActionPerformed
        // TODO add your handling code here:
        try {
            salleControlleur.sauvegarderProjet();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_menuEnregistrerProjetActionPerformed

    private void menuNouveauProjetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNouveauProjetActionPerformed
        // 1. Afficher le dialog de nouveau projet si le projet n'est pas deja sauvegardé.
        Configuration configuration = salleControlleur.getConfiguration();

        if (!configuration.isSaved()) {
            dialogNouveauProjet.setVisible(true);
        } else {
            // 2. Sinon juste retourner à la vue de projet initiale.
            boutonNonSauvegarderActionPerformed(null);
        }
    }//GEN-LAST:event_menuNouveauProjetActionPerformed

    private void ajouterFenetreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterFenetreActionPerformed
        drawingPanel.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        drawingPanel.setModeAjoutFenetre(true);
        drawingPanel.setModeAjoutPriseElectrique(false);
        drawingPanel.setModeAjoutPorte(false);
        drawingPanel.setModeAjoutRetourAir(false);
    }//GEN-LAST:event_ajouterFenetreActionPerformed

    private void ajouterPriseElectriqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterPriseElectriqueActionPerformed
        drawingPanel.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        drawingPanel.setModeAjoutFenetre(false);
        drawingPanel.setModeAjoutPriseElectrique(true);
        drawingPanel.setModeAjoutPorte(false);
        drawingPanel.setModeAjoutRetourAir(false);
    }//GEN-LAST:event_ajouterPriseElectriqueActionPerformed

    private void ajouterPorteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterPorteActionPerformed
        drawingPanel.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        drawingPanel.setModeAjoutFenetre(false);
        drawingPanel.setModeAjoutPriseElectrique(false);
        drawingPanel.setModeAjoutPorte(true);
        drawingPanel.setModeAjoutRetourAir(false);
    }//GEN-LAST:event_ajouterPorteActionPerformed

    private void ajouterRetourAirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterRetourAirActionPerformed
        drawingPanel.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        drawingPanel.setModeAjoutFenetre(false);
        drawingPanel.setModeAjoutPriseElectrique(false);
        drawingPanel.setModeAjoutPorte(false);
        drawingPanel.setModeAjoutRetourAir(true);
    }//GEN-LAST:event_ajouterRetourAirActionPerformed

    private void buttonInterieurExterieurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInterieurExterieurActionPerformed
        if("Interieur".equals(evt.getActionCommand())){
            buttonInterieurExterieur.setActionCommand("Exterieur");
            buttonInterieurExterieur.setText("Exterieur");
            drawingPanel.setCurrentSens(Sens.INTERIEUR);
            ajouterPriseElectrique.setEnabled(true);
            ajouterRetourAir.setEnabled(true);
        }
        else{
            buttonInterieurExterieur.setActionCommand("Interieur");
            buttonInterieurExterieur.setText("Interieur");
            drawingPanel.setCurrentSens(Sens.EXTERIEUR);
            ajouterPriseElectrique.setEnabled(false);
            ajouterRetourAir.setEnabled(false);
        }
        refreshSalle();
    }//GEN-LAST:event_buttonInterieurExterieurActionPerformed

    private void menuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUndoActionPerformed
        // 1. Effacer les events listeners pour ne pas rappeler le controlleur une fois
        // les propriétés de la salle miste-à-jour.
        effacerEventListenersSpinnersEtComboboxes();
        
        // 2. Faire le undo dans le controlleur, et mettre a jour les pannels.
        salleControlleur.undo();
        refreshSalle();
        mettreAjourPanelProprietesSalle();
        
        // 3. Rajouter les event listeners qu'on a enlever à l'étape 1.
        ajouterEventListenersSpinnersEtComboboxes();
    }//GEN-LAST:event_menuUndoActionPerformed

    private void menuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRedoActionPerformed
        // 1. Effacer les events listeners pour ne pas rappeler le controlleur une fois
        // les propriétés de la salle miste-à-jour.
        effacerEventListenersSpinnersEtComboboxes();
        
        // 2. Faire le undo dans le controlleur, et mettre a jour les pannels.
        salleControlleur.redo();
        refreshSalle();
        mettreAjourPanelProprietesSalle();
        
        // 3. Rajouter les event listeners qu'on a enlever à l'étape 1.
        ajouterEventListenersSpinnersEtComboboxes();
    }//GEN-LAST:event_menuRedoActionPerformed
    
    private void cbxCoordonneeYAccessoireDenominateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCoordonneeYAccessoireDenominateurActionPerformed
        updateAccessoireCoordonneeY();
    }//GEN-LAST:event_cbxCoordonneeYAccessoireDenominateurActionPerformed

    private void spinnerCoordonneeYAccessoireNumerateurStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCoordonneeYAccessoireNumerateurStateChanged
        updateAccessoireCoordonneeY();
    }//GEN-LAST:event_spinnerCoordonneeYAccessoireNumerateurStateChanged

    private void spinnerCoordonneeYAccessoirePartieEntiereStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCoordonneeYAccessoirePartieEntiereStateChanged
        updateAccessoireCoordonneeY();
    }//GEN-LAST:event_spinnerCoordonneeYAccessoirePartieEntiereStateChanged

    private void cbxCoordonneeXAccessoireDenominateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCoordonneeXAccessoireDenominateurActionPerformed
        updateAccessoireCoordonneeX();
    }//GEN-LAST:event_cbxCoordonneeXAccessoireDenominateurActionPerformed

    private void spinnerCoordonneeXAccessoireNumerateurStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCoordonneeXAccessoireNumerateurStateChanged
        updateAccessoireCoordonneeX();
    }//GEN-LAST:event_spinnerCoordonneeXAccessoireNumerateurStateChanged

    private void spinnerCoordonneeXAccessoirePartieEntiereStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCoordonneeXAccessoirePartieEntiereStateChanged
        updateAccessoireCoordonneeX();
    }//GEN-LAST:event_spinnerCoordonneeXAccessoirePartieEntiereStateChanged

    private void cbxHauteurAccessoireDenominateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxHauteurAccessoireDenominateurActionPerformed
        updateAccessoireHauteur();
    }//GEN-LAST:event_cbxHauteurAccessoireDenominateurActionPerformed

    private void spinnerHauteurAccessoireNumerateurStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerHauteurAccessoireNumerateurStateChanged
        updateAccessoireHauteur();
    }//GEN-LAST:event_spinnerHauteurAccessoireNumerateurStateChanged

    private void spinnerHauteurAccessoirePartieEntiereStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerHauteurAccessoirePartieEntiereStateChanged
        updateAccessoireHauteur();
    }//GEN-LAST:event_spinnerHauteurAccessoirePartieEntiereStateChanged

    private void cbxLargeurAccessoireDenominateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLargeurAccessoireDenominateurActionPerformed
        updateAccessoireLargeur();
    }//GEN-LAST:event_cbxLargeurAccessoireDenominateurActionPerformed

    private void spinnerLargeurAccessoireNumerateurStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerLargeurAccessoireNumerateurStateChanged
        updateAccessoireLargeur();
    }//GEN-LAST:event_spinnerLargeurAccessoireNumerateurStateChanged

    private void spinnerLargeurAccessoirePartieEntiereStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerLargeurAccessoirePartieEntiereStateChanged
        updateAccessoireLargeur();
    }//GEN-LAST:event_spinnerLargeurAccessoirePartieEntiereStateChanged

    private void menuAfficherGrilleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAfficherGrilleActionPerformed
        // 1. Renverser l'affichage de la grille
        salleControlleur.reverseAfficherGrille();
        
        if (salleControlleur.getAfficherGrille()) {
            menuAfficherGrille.setText("Cacher la grille");
        } else {
            menuAfficherGrille.setText("Afficher la grille");
        }
        
        refreshSalle();
    }//GEN-LAST:event_menuAfficherGrilleActionPerformed

    private void spinnerLargeurRetourAirPartieEntiereStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerLargeurRetourAirPartieEntiereStateChanged
       updateLargeurRetourAir();
    }//GEN-LAST:event_spinnerLargeurRetourAirPartieEntiereStateChanged

    private void cbxLargeurRetourAirDenominateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLargeurRetourAirDenominateurActionPerformed
        updateLargeurRetourAir();
    }//GEN-LAST:event_cbxLargeurRetourAirDenominateurActionPerformed

    private void spinnerLargeurRetourAirNumerateurStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerLargeurRetourAirNumerateurStateChanged
        updateLargeurRetourAir();
    }//GEN-LAST:event_spinnerLargeurRetourAirNumerateurStateChanged

    private void drawingPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseDragged
        // L'utilisateur veut dragger un accessoire donc faire une copie de la salle.
        if (utilisateurDraggAccessoire == 0) {
            salleControlleur.creerNouvelleCopieSalleCourante();
        }
        
        utilisateurDraggAccessoire += 1;
        
        Point mousePosition = evt.getPoint();
        boolean miroir = false;
        
        if ( ((drawingPanel.getCurrentOrientation() == Orientation.NORD || drawingPanel.getCurrentOrientation() == Orientation.EST) && drawingPanel.getCurrentSens() == Sens.EXTERIEUR) ||
             ((drawingPanel.getCurrentOrientation() == Orientation.SUD || drawingPanel.getCurrentOrientation() == Orientation.OUEST) && drawingPanel.getCurrentSens() == Sens.INTERIEUR) ){
            miroir = true;
        }
        
        double pointx = (double)((mousePosition.x -20 ) / drawingPanel.zoomValue);
        double pointy = (double)((mousePosition.y -20 ) / drawingPanel.zoomValue);
        
        switch (drawingPanel.getTypeSelected()) {
            case 0:
                break;
            case 1:
                spinnerSeparateurPositionXPartieEntiere.setValue(FractionImperiale.doubleToFraction(pointx).getPartieEntiere());
                spinnerSeparateurPositionXNumerateur.setValue(FractionImperiale.doubleToFraction(pointx).getNumerateur());
                cbxSeparateurPositionXDenominateur.setSelectedItem(Integer.toString(FractionImperiale.doubleToFraction(pointx).getDenominateur()));
                break;
            case 2:
                spinnerSeparateurPositionYPartieEntiere.setValue(FractionImperiale.doubleToFraction(pointy).getPartieEntiere());
                spinnerSeparateurPositionYNumerateur.setValue(FractionImperiale.doubleToFraction(pointy).getNumerateur());
                cbxSeparateurPositionYDenominateur.setSelectedItem(Integer.toString(FractionImperiale.doubleToFraction(pointy).getDenominateur()));
            case 3:
                break;
            case 4:
                if (miroir != false){
                    double pointXmiroir = pointx;
                    if (drawingPanel.getCurrentOrientation() == Orientation.NORD || drawingPanel.getCurrentOrientation() == Orientation.SUD){
                        pointXmiroir = salleControlleur.getLongueurSalle().toDouble() - pointx;
                    }
                    else if (drawingPanel.getCurrentOrientation() == Orientation.OUEST || drawingPanel.getCurrentOrientation() == Orientation.EST){
                        pointXmiroir = salleControlleur.getLargeurSalle().toDouble() - pointx;
                    }
                    spinnerCoordonneeXAccessoirePartieEntiere.setValue(FractionImperiale.doubleToFraction(pointXmiroir).getPartieEntiere());
                    spinnerCoordonneeXAccessoireNumerateur.setValue(FractionImperiale.doubleToFraction(pointXmiroir).getNumerateur());
                    cbxCoordonneeXAccessoireDenominateur.setSelectedItem(Integer.toString(FractionImperiale.doubleToFraction(pointXmiroir).getDenominateur()));
                }
                else {
                    spinnerCoordonneeXAccessoirePartieEntiere.setValue(FractionImperiale.doubleToFraction(pointx).getPartieEntiere());
                    spinnerCoordonneeXAccessoireNumerateur.setValue(FractionImperiale.doubleToFraction(pointx).getNumerateur());
                    cbxCoordonneeXAccessoireDenominateur.setSelectedItem(Integer.toString(FractionImperiale.doubleToFraction(pointx).getDenominateur()));
                }
                spinnerCoordonneeYAccessoirePartieEntiere.setValue(FractionImperiale.doubleToFraction(pointy).getPartieEntiere());
                spinnerCoordonneeYAccessoireNumerateur.setValue(FractionImperiale.doubleToFraction(pointy).getNumerateur());
                cbxCoordonneeYAccessoireDenominateur.setSelectedItem(Integer.toString(FractionImperiale.doubleToFraction(pointy).getDenominateur()));
                break;
            case 5:
                break;
            default:
                break;
        }
    }//GEN-LAST:event_drawingPanelMouseDragged

    private void cbxPanneauNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPanneauNumeroActionPerformed
        drawingPanel.setIndexPanneau(cbxPanneauNumero.getSelectedIndex());
        refreshSalle();
    }//GEN-LAST:event_cbxPanneauNumeroActionPerformed

    private void drawingPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseReleased
        // 1. L'utilisateur a termine de dragg un accessoire.
        if (utilisateurDraggAccessoire > 0) {
            utilisateurDraggAccessoire = 0;
        }
        
        refreshSalle();
    }//GEN-LAST:event_drawingPanelMouseReleased

    private void exporterFichierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporterFichierActionPerformed
        // TODO add your handling code here:
        boolean isExported = salleControlleur.exporterSVG();
        
        if (isExported) {
            labelResultatExport.setText("Le panneau a été exporté");
        } else {
            labelResultatExport.setText("Le panneau n'a pas été exporté");
        }
        dialogExport.setVisible(true);
    }//GEN-LAST:event_exporterFichierActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ajouterFenetre;
    private javax.swing.JMenuItem ajouterPorte;
    private javax.swing.JMenuItem ajouterPriseElectrique;
    private javax.swing.JMenuItem ajouterRetourAir;
    private javax.swing.JMenuBar barMenu;
    private javax.swing.JButton boutonAide;
    private javax.swing.JButton boutonAide2;
    private javax.swing.JButton boutonAnnuler;
    private javax.swing.JButton boutonAnnuler2;
    private javax.swing.JButton boutonChoisir;
    private javax.swing.JButton boutonCreer;
    private javax.swing.JButton boutonCreer2;
    private javax.swing.JButton boutonNonSauvegarder;
    private javax.swing.JButton boutonOuiSauvegarder;
    private javax.swing.JButton boutonOuvrir;
    private javax.swing.JButton boutonPrecedent;
    private javax.swing.JButton boutonPrecedent2;
    private javax.swing.JButton boutonProchain;
    private javax.swing.JButton boutonProchain2;
    private javax.swing.JButton boutonQuitter;
    private javax.swing.JButton boutonSauvegarder;
    private javax.swing.JButton bouttonNouveauProjet;
    private javax.swing.JToggleButton buttonInterieurExterieur;
    private javax.swing.JComboBox<String> cbxCoordonneeXAccessoireDenominateur;
    private javax.swing.JComboBox<String> cbxCoordonneeYAccessoireDenominateur;
    private javax.swing.JComboBox<String> cbxDistanceSolRetourAirDenominateur;
    private javax.swing.JComboBox<String> cbxEpaisseurMurDenominateur;
    private javax.swing.JComboBox<String> cbxHauteurAccessoireDenominateur;
    private javax.swing.JComboBox<String> cbxHauteurDenominateur;
    private javax.swing.JComboBox<String> cbxHauteurDesTrousDeVentilationDenominateur;
    private javax.swing.JComboBox<String> cbxHauteurGrilleDenominateur;
    private javax.swing.JComboBox<String> cbxHauteurRetourAirDenominateur;
    private javax.swing.JComboBox<String> cbxLargeurAccessoireDenominateur;
    private javax.swing.JComboBox<String> cbxLargeurDenominateur;
    private javax.swing.JComboBox<String> cbxLargeurGrilleDenominateur;
    private javax.swing.JComboBox<String> cbxLargeurMurDenominateur;
    private javax.swing.JComboBox<String> cbxLargeurRetourAirDenominateur;
    private javax.swing.JComboBox<String> cbxLongueurDenominateur;
    private javax.swing.JComboBox<String> cbxMargeDesFenetresDenominateur;
    private javax.swing.JComboBox<String> cbxMargePlisDenominateur;
    private javax.swing.JComboBox<String> cbxMargeSoudureDenominateur;
    private javax.swing.JComboBox<String> cbxPanneauNumero;
    private javax.swing.JComboBox<String> cbxSeparateurPositionXDenominateur;
    private javax.swing.JComboBox<String> cbxSeparateurPositionYDenominateur;
    private javax.swing.JSpinner comboBoxAnglePlisDeSoudure;
    private javax.swing.JComboBox<String> comboBoxDenominateur;
    private javax.swing.JComboBox<String> comboBoxOrientation;
    private javax.swing.JComboBox<String> comboBoxTypeDeVue;
    private javax.swing.JComboBox<String> comboBoxUniteDeMesure;
    private javax.swing.JDialog dialogExport;
    private javax.swing.JDialog dialogNouveauProjet;
    private javax.swing.JDialog dialogQuitter;
    private javax.swing.JDialog dialogaPropos;
    private ca.ulaval.glo2004.gui.DrawingPanel drawingPanel;
    private javax.swing.JTextPane errorMessage;
    private javax.swing.JMenuItem exporterFichier;
    private javax.swing.JFileChooser fileChooserOuvertureInitial;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelAngleDePlisSoudure;
    private javax.swing.JLabel labelBarreDivisionCoordonneX;
    private javax.swing.JLabel labelBarreDivisionCoordonneY;
    private javax.swing.JLabel labelCheminSauvegarde;
    private javax.swing.JLabel labelEtapes;
    private javax.swing.JLabel labelEtapes1;
    private javax.swing.JLabel labelEtapes4;
    private javax.swing.JLabel labelHauteurGrille;
    private javax.swing.JLabel labelInfoProjet;
    private javax.swing.JLabel labelInfoProjet2;
    private javax.swing.JLabel labelInfoQuitter;
    private javax.swing.JLabel labelInfoQuitter1;
    private javax.swing.JLabel labelLargeurGrille;
    private javax.swing.JLabel labelMuracleNotice;
    private javax.swing.JLabel labelNomDuProjet;
    private javax.swing.JLabel labelNotice;
    private javax.swing.JLabel labelParametreSalleDefault;
    private javax.swing.JLabel labelParametresSalle;
    private javax.swing.JLabel labelParametresSalle2;
    private javax.swing.JLabel labelProprieteDeSalle;
    private javax.swing.JLabel labelProprieteSelection;
    private javax.swing.JLabel labelResultatExport;
    private javax.swing.JLabel labelUniteDeMesure;
    private javax.swing.JLabel lblBarreDivisionDistanceSolRetourAir;
    private javax.swing.JLabel lblBarreDivisionEpaisseurMur;
    private javax.swing.JLabel lblBarreDivisionHauteur;
    private javax.swing.JLabel lblBarreDivisionHauteurAccessoire;
    private javax.swing.JLabel lblBarreDivisionHauteurDesTrousDeVentilation;
    private javax.swing.JLabel lblBarreDivisionHauteurRetourAir;
    private javax.swing.JLabel lblBarreDivisionLargeur;
    private javax.swing.JLabel lblBarreDivisionLargeurAccessoire;
    private javax.swing.JLabel lblBarreDivisionLargeurMur;
    private javax.swing.JLabel lblBarreDivisionLargeurMur1;
    private javax.swing.JLabel lblBarreDivisionLargeurMur2;
    private javax.swing.JLabel lblBarreDivisionLargeurRetourAir;
    private javax.swing.JLabel lblBarreDivisionLongueur;
    private javax.swing.JLabel lblBarreDivisionMargeAccessoire;
    private javax.swing.JLabel lblBarreDivisionMargeAccessoire1;
    private javax.swing.JLabel lblBarreDivisionMargeDesFenetres;
    private javax.swing.JLabel lblBarreDivisionMargePlis;
    private javax.swing.JLabel lblBarreDivisionMargePlis1;
    private javax.swing.JLabel lblCoordonneeAccesssoireX;
    private javax.swing.JLabel lblDistanceSolRetourAir;
    private javax.swing.JLabel lblDistanceSolRetourAir1;
    private javax.swing.JLabel lblEpaisseurMur;
    private javax.swing.JLabel lblHauteur;
    private javax.swing.JLabel lblHauteurAccesssoire;
    private javax.swing.JLabel lblHauteurDesTrousDeVentilation;
    private javax.swing.JLabel lblHauteurRetourAir;
    private javax.swing.JLabel lblLargeur;
    private javax.swing.JLabel lblLargeurAccesssoire;
    private javax.swing.JLabel lblLargeurMur;
    private javax.swing.JLabel lblLargeurMur1;
    private javax.swing.JLabel lblLongueur2;
    private javax.swing.JLabel lblMargeAccesssoire;
    private javax.swing.JLabel lblMargeDesFenetres;
    private javax.swing.JLabel lblMargePlis;
    private javax.swing.JLabel lblMargeSoudure;
    private javax.swing.JLabel lblSeparateurX;
    private javax.swing.JLabel lblSeparateurY;
    private javax.swing.JMenu menuAccessoire;
    private javax.swing.JMenuItem menuAfficherGrille;
    private javax.swing.JMenu menuAide;
    private javax.swing.JMenu menuEditer;
    private javax.swing.JMenuItem menuEnregistrerProjet;
    private javax.swing.JMenu menuFichier;
    private javax.swing.JMenu menuInserer;
    private javax.swing.JMenuItem menuNouveauProjet;
    private javax.swing.JMenu menuOutils;
    private javax.swing.JMenuItem menuQuitter;
    private javax.swing.JMenuItem menuRedo;
    private javax.swing.JMenu menuSupprimer;
    private javax.swing.JMenuItem menuUndo;
    private javax.swing.JMenuItem menuVueDeMur;
    private javax.swing.JMenuItem menuVueDePanneau;
    private javax.swing.JMenuItem menuVueEnElevation;
    private javax.swing.JMenuItem menuVueEnPlan;
    private javax.swing.JMenu menuVues;
    private javax.swing.JPanel panelAccessoires;
    private javax.swing.JPanel panelContainerBoutonsInitialisation;
    private javax.swing.JPanel panelControle;
    private javax.swing.JPanel panelControleDeux;
    private javax.swing.JPanel panelDeDrawing;
    private javax.swing.JPanel panelEtapeUn;
    private javax.swing.JPanel panelEtapeUn2;
    private javax.swing.JPanel panelEtapeUnInfo;
    private javax.swing.JPanel panelEtapeUnInfo2;
    private javax.swing.JPanel panelEtapeUnLogo;
    private javax.swing.JPanel panelEtapeUnLogo2;
    private javax.swing.JPanel panelGrille;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelInfoDeux;
    private javax.swing.JPanel panelInfoProjet;
    private javax.swing.JPanel panelInfoProjet2;
    private javax.swing.JPanel panelInitial;
    private javax.swing.JPanel panelInitialisationDeProjet;
    private javax.swing.JPanel panelLogoMuracle;
    private javax.swing.JPanel panelMurSelectionne;
    private javax.swing.JPanel panelMurSelectionne1;
    private javax.swing.JPanel panelMurSelectionne2;
    private javax.swing.JPanel panelNouveauProjetEtapeDeux;
    private javax.swing.JPanel panelNouveauProjetEtapeUn;
    private javax.swing.JPanel panelObjetsSelectionnes;
    private javax.swing.JPanel panelOptionProjet;
    private javax.swing.JPanel panelOuvrirProjet;
    private javax.swing.JPanel panelProprieteDeSalle;
    private javax.swing.JPanel panelProprietes2;
    private javax.swing.JPanel panelRetourAir;
    private javax.swing.JPanel panelSeparateurX;
    private javax.swing.JPanel panelSeparateurY;
    private javax.swing.JPanel panelVueDeProjet;
    private javax.swing.JPanel panelVueGrillePropriete;
    private javax.swing.JPanel panelVuesGenerales;
    private javax.swing.JScrollPane scrollPaneNotice;
    private javax.swing.JScrollPane scrollPaneTableValeurs;
    private javax.swing.JScrollPane scrollingPaneDrawingPanel;
    private javax.swing.JSpinner spinnerAnglePlisSoudure;
    private javax.swing.JSpinner spinnerCoordonneeXAccessoireNumerateur;
    private javax.swing.JSpinner spinnerCoordonneeXAccessoirePartieEntiere;
    private javax.swing.JSpinner spinnerCoordonneeYAccessoireNumerateur;
    private javax.swing.JSpinner spinnerCoordonneeYAccessoirePartieEntiere;
    private javax.swing.JSpinner spinnerDistanceSolRetourAirNumerateur;
    private javax.swing.JSpinner spinnerDistanceSolRetourAirPartieEntiere;
    private javax.swing.JSpinner spinnerEpaisseurMurNumerateur;
    private javax.swing.JSpinner spinnerEpaisseurMurPartieEntiere;
    private javax.swing.JSpinner spinnerHauteurAccessoireNumerateur;
    private javax.swing.JSpinner spinnerHauteurAccessoirePartieEntiere;
    private javax.swing.JSpinner spinnerHauteurDesTrousDeVentilationNumerateur;
    private javax.swing.JSpinner spinnerHauteurDesTrousDeVentilationPartieEntiere;
    private javax.swing.JSpinner spinnerHauteurGrilleNumerateur;
    private javax.swing.JSpinner spinnerHauteurGrillePartieEntiere;
    private javax.swing.JSpinner spinnerHauteurMurNumerateur;
    private javax.swing.JSpinner spinnerHauteurMurPartieEntiere;
    private javax.swing.JSpinner spinnerHauteurRetourAirNumerateur;
    private javax.swing.JSpinner spinnerHauteurRetourAirPartieEntiere;
    private javax.swing.JSpinner spinnerLargeurAccessoireNumerateur;
    private javax.swing.JSpinner spinnerLargeurAccessoirePartieEntiere;
    private javax.swing.JSpinner spinnerLargeurGrilleNumerateur;
    private javax.swing.JSpinner spinnerLargeurGrillePartieEntiere;
    private javax.swing.JSpinner spinnerLargeurMurNumerateur;
    private javax.swing.JSpinner spinnerLargeurMurPartieEntiere;
    private javax.swing.JSpinner spinnerLargeurRetourAirNumerateur;
    private javax.swing.JSpinner spinnerLargeurRetourAirPartieEntiere;
    private javax.swing.JSpinner spinnerLargeureNumerateur;
    private javax.swing.JSpinner spinnerLargeurePartieEntiere;
    private javax.swing.JSpinner spinnerLongueurNumerateur;
    private javax.swing.JSpinner spinnerLongueurPartieEntiere;
    private javax.swing.JSpinner spinnerMargeDesFenetresNumerateur;
    private javax.swing.JSpinner spinnerMargeDesFenetresPartieEntiere;
    private javax.swing.JSpinner spinnerMargePlisNumerateur;
    private javax.swing.JSpinner spinnerMargePlisPartieEntiere;
    private javax.swing.JSpinner spinnerMargeSoudureNumerateur;
    private javax.swing.JSpinner spinnerMargeSoudurePartieEntiere;
    private javax.swing.JSpinner spinnerSeparateurPositionXNumerateur;
    private javax.swing.JSpinner spinnerSeparateurPositionXPartieEntiere;
    private javax.swing.JSpinner spinnerSeparateurPositionYNumerateur;
    private javax.swing.JSpinner spinnerSeparateurPositionYPartieEntiere;
    private javax.swing.JMenuItem supprimerSelection;
    private javax.swing.JTable tableDesMesures;
    private javax.swing.JTextArea textAreaErrorCreationProjet;
    private javax.swing.JTextArea textAreaNotice;
    private javax.swing.JTextField textCheminDeSauvegarde;
    private javax.swing.JTextField textCheminEnregistrement;
    private javax.swing.JTextField textNomDuProjet;
    // End of variables declaration//GEN-END:variables
    
    
    private int utilisateurDraggAccessoire = 0;
            
    // **** DEBUT DE EVENTS LISTENERS POUR LES SPINNERS ET LES COMBOBOX DE FRACTIONIMPERIALE *****
    private javax.swing.event.ChangeListener longueurePartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateLongueurSalle();
        }
    };
    private javax.swing.event.ChangeListener longueureNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateLongueurSalle();
        }
    };
    private java.awt.event.ItemListener longueureDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateLongueurSalle();
        }
    };

    private javax.swing.event.ChangeListener largeurPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateLargeurSalle();
        }
    };
    private javax.swing.event.ChangeListener largeurNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateLargeurSalle();
        }
    };
    private java.awt.event.ItemListener largeurDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateLargeurSalle();
        }
    };

    private javax.swing.event.ChangeListener hateurMurPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurMurs();
        }
    };
    private javax.swing.event.ChangeListener hateurMurNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurMurs();
        }
    };
    private java.awt.event.ItemListener hateurMurDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateHauteurMurs();
        }
    };

    private javax.swing.event.ChangeListener epaisseurMurPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateEpaisseurMurs();
        }
    };
    private javax.swing.event.ChangeListener epaisseurMurNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateEpaisseurMurs();
        }
    };
    private java.awt.event.ItemListener epaisseurMurDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateEpaisseurMurs();
        }
    };

    private javax.swing.event.ChangeListener margePlisPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateMargePlis();
        }
    };
    private javax.swing.event.ChangeListener margePlisNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateMargePlis();
        }
    };
    private java.awt.event.ItemListener margePlisDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateMargePlis();
        }
    };

    private javax.swing.event.ChangeListener margeSoudurePartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateMargeSoudure();
        }
    };
    private javax.swing.event.ChangeListener margeSoudureNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateMargeSoudure();
        }
    };
    private java.awt.event.ItemListener margeSoudureDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateMargeSoudure();
        }
    };

    private javax.swing.event.ChangeListener hauteurRetourAirPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurRetourAir();
        }
    };
    private javax.swing.event.ChangeListener hauteurRetourAirNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurRetourAir();
        }
    };
    private java.awt.event.ItemListener hauteurRetourAirDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateHauteurRetourAir();
        }
    };

    private javax.swing.event.ChangeListener distanceSolReourAirPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurDistanceSolRetourAir();
        }
    };
    private javax.swing.event.ChangeListener distanceSolReourAirNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurDistanceSolRetourAir();
        }
    };
    private java.awt.event.ItemListener distanceSolReourAirDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateHauteurDistanceSolRetourAir();
        }
    };

    private javax.swing.event.ChangeListener angleSoudureChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateAnglePlisSoudures();
        }
    };

    private javax.swing.event.ChangeListener margeFenetrePartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateMargeDesFenetres();
        }
    };
    private javax.swing.event.ChangeListener margeFenetreNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateMargeDesFenetres();
        }
    };
    private java.awt.event.ItemListener margeFenetreDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateMargeDesFenetres();
        }
    };
    
    private javax.swing.event.ChangeListener hauteurTrousVentilationPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurTrousVentilation();
        }
    };
    private javax.swing.event.ChangeListener hauteurTrousVentilationNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurTrousVentilation();
        }
    };
    private java.awt.event.ItemListener hauteurTrousVentilationDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateHauteurTrousVentilation();
        }
    };
    
    private javax.swing.event.ChangeListener hauteurGrillePartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurGrille();
        }
    };
    private javax.swing.event.ChangeListener hauteurGrilleNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateHauteurGrille();
        }
    };
    private java.awt.event.ItemListener hauteurGrilleDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateHauteurGrille();
        }
    };
    
    private javax.swing.event.ChangeListener largeurGrillePartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateLargeurGrille();
        }
    };
    private javax.swing.event.ChangeListener largeurGrilleNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateLargeurGrille();
        }
    };
    private java.awt.event.ItemListener largeurGrilleDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateLargeurGrille();
        }
    };
    
    private javax.swing.event.ChangeListener separateurCoordonneXPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateSeparateurXPosition();
        }
    };
    private javax.swing.event.ChangeListener separateurCoordonneXNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateSeparateurXPosition();
        }
    };
    private java.awt.event.ItemListener separateurCoordonneXDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateSeparateurXPosition();
        }
    };
    
    private javax.swing.event.ChangeListener separateurCoordonneYPartieEntiereChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateSeparateurYPosition();
        }
    };
    private javax.swing.event.ChangeListener separateurCoordonneYNumerateurChangeListener = new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            updateSeparateurYPosition();
        }
    };
    private java.awt.event.ItemListener separateurCoordonneYDenominateurChangeListener = new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            updateSeparateurYPosition();
        }
    };
    
    
    // **** FIN DE EVENTS LISTENERS POUR LES SPINNERS ET LES COMBOBOX DE FRACTIONIMPERIALE *****
    
    public void refreshSalle(){
        // 1. Effacer les event listeners pour ne pas re-trigger de refreshSalle.
        effacerEventListenersSpinnersEtComboboxes();
        
        // 2. MAJ les pannels dynamiques
        switch (drawingPanel.getTypeSelected()) {
            case 0:
                panelObjetsSelectionnes.setVisible(false);
                break;
            case 1:
                panelObjetsSelectionnes.setVisible(true);
                panelSeparateurX.setVisible(true);
                panelSeparateurY.setVisible(false);
                panelMurSelectionne.setVisible(false);
                panelRetourAir.setVisible(false);
                panelAccessoires.setVisible(false);
                
                if (salleControlleur.getSelectedSeparateurPosition() != null) {
                    spinnerSeparateurPositionXPartieEntiere.setValue(salleControlleur.getSelectedSeparateurPosition().partieEntiere);
                    spinnerSeparateurPositionXNumerateur.setValue(salleControlleur.getSelectedSeparateurPosition().numerateur);
                    cbxSeparateurPositionXDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedSeparateurPosition().denominateur));
                }

                break;
            case 2:
                panelObjetsSelectionnes.setVisible(true);
                panelSeparateurX.setVisible(false);
                panelSeparateurY.setVisible(true);
                panelMurSelectionne.setVisible(false);
                panelRetourAir.setVisible(false);
                panelAccessoires.setVisible(false);
                
                if (salleControlleur.getSelectedSeparateurPosition() != null) {
                    spinnerSeparateurPositionYPartieEntiere.setValue(salleControlleur.getSelectedSeparateurPosition().partieEntiere);
                    spinnerSeparateurPositionYNumerateur.setValue(salleControlleur.getSelectedSeparateurPosition().numerateur);
                    cbxSeparateurPositionYDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedSeparateurPosition().denominateur));
                }

                break;
            case 3:
                panelObjetsSelectionnes.setVisible(true);
                panelSeparateurX.setVisible(false);
                panelSeparateurY.setVisible(false);
                panelMurSelectionne.setVisible(true);
                panelRetourAir.setVisible(false);
                panelAccessoires.setVisible(false);
                spinnerLargeurMurPartieEntiere.setValue(salleControlleur.getSelectedMurLargeurExterieure().partieEntiere);
                spinnerLargeurMurNumerateur.setValue(salleControlleur.getSelectedMurLargeurExterieure().numerateur);
                cbxLargeurMurDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedMurLargeurExterieure().denominateur));
                break;
            case 4:
                panelObjetsSelectionnes.setVisible(true);
                panelSeparateurX.setVisible(false);
                panelSeparateurY.setVisible(false);
                panelMurSelectionne.setVisible(false);
                panelRetourAir.setVisible(false);
                panelAccessoires.setVisible(true);
                
                spinnerLargeurAccessoirePartieEntiere.setValue(salleControlleur.getSelectedAccessoireLargeur().partieEntiere);
                spinnerLargeurAccessoireNumerateur.setValue(salleControlleur.getSelectedAccessoireLargeur().numerateur);
                cbxLargeurAccessoireDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedAccessoireLargeur().denominateur));
                
                spinnerHauteurAccessoirePartieEntiere.setValue(salleControlleur.getSelectedAccessoireHauteur().partieEntiere);
                spinnerHauteurAccessoireNumerateur.setValue(salleControlleur.getSelectedAccessoireHauteur().numerateur);
                cbxHauteurAccessoireDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedAccessoireHauteur().denominateur));
                
                spinnerCoordonneeXAccessoirePartieEntiere.setValue(salleControlleur.getSelectedAccessoireCoordonneeX().partieEntiere);
                spinnerCoordonneeXAccessoireNumerateur.setValue(salleControlleur.getSelectedAccessoireCoordonneeX().numerateur);
                cbxCoordonneeXAccessoireDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedAccessoireCoordonneeX().denominateur));
                
                spinnerCoordonneeYAccessoirePartieEntiere.setValue(salleControlleur.getSelectedAccessoireCoordonneeY().partieEntiere);
                spinnerCoordonneeYAccessoireNumerateur.setValue(salleControlleur.getSelectedAccessoireCoordonneeY().numerateur);
                cbxCoordonneeYAccessoireDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedAccessoireCoordonneeY().denominateur));
                break;
            case 5:
                panelObjetsSelectionnes.setVisible(true);
                panelSeparateurX.setVisible(false);
                panelSeparateurY.setVisible(false);
                panelMurSelectionne.setVisible(false);
                panelRetourAir.setVisible(true);
                panelAccessoires.setVisible(false);
                
                spinnerLargeurRetourAirPartieEntiere.setValue(salleControlleur.getSelectedRetourAirLargeur().partieEntiere);
                spinnerLargeurRetourAirNumerateur.setValue(salleControlleur.getSelectedRetourAirLargeur().numerateur);
                cbxLargeurRetourAirDenominateur.setSelectedItem(Integer.toString(salleControlleur.getSelectedRetourAirLargeur().denominateur));
                
                break;    
                
            default:
                break;
        }
        
        // 3. MAJ le drawingPanel et rajouter les event listeners.
        drawingPanel.repaint();
        checkError(salleControlleur.getErrorType());
        ajouterEventListenersSpinnersEtComboboxes();
    }

    private FractionImperialeDTO[] getMesuresSalle(){
        int rowNumberMax = 9;
        int columnNumberMax = 3;
        FractionImperialeDTO[] mesuresDeSalle = new FractionImperialeDTO[9];
        
        // Passer à travers le tableau
        for (int rowNumber = 0; rowNumber < rowNumberMax; rowNumber++) {
            Integer partieEntiere = -1;
            Integer numerateur = -1;
            Integer denominateur = -1;
            
            for (int columnNumber = 1; columnNumber <= columnNumberMax; columnNumber++) {

                switch(columnNumber) {
                    case 1:
                      partieEntiere = (Integer) tableDesMesures.getValueAt(rowNumber, columnNumber);
                      break;
                    case 2:
                      numerateur = (Integer) tableDesMesures.getValueAt(rowNumber, columnNumber);
                      break;
                    case 3:
                      String valeurDenominateurString = (String) tableDesMesures.getValueAt(rowNumber, columnNumber);
                      denominateur = Integer.parseInt(valeurDenominateurString);
                      break;
                  }
            }
            
            if (partieEntiere == null || numerateur == null || denominateur == null) {
                throw new IllegalArgumentException("Une des mesures est nulle");
            }
            mesuresDeSalle[rowNumber] = new FractionImperialeDTO(partieEntiere, numerateur, denominateur);
        }
                
        return mesuresDeSalle;
    }
    private void updateLongueurSalle(){
        salleControlleur.setLongueurSalle(new FractionImperialeDTO((int)spinnerLongueurPartieEntiere.getValue(),
                                                                (int)spinnerLongueurNumerateur.getValue(),
                                                                Integer.parseInt(cbxLongueurDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    private void updateLargeurSalle(){
        salleControlleur.setLargeurSalle(new FractionImperialeDTO((int)spinnerLargeurePartieEntiere.getValue(),
                                                                (int)spinnerLargeureNumerateur.getValue(),
                                                                Integer.parseInt(cbxLargeurDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    private void updateHauteurMurs(){
        salleControlleur.setHauteurMurs(new FractionImperialeDTO((int)spinnerHauteurMurPartieEntiere.getValue(),
                                                                (int)spinnerHauteurMurNumerateur.getValue(),
                                                                Integer.parseInt(cbxHauteurDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    
    private void updateEpaisseurMurs(){
        salleControlleur.setEpaisseurDesMurs(new FractionImperialeDTO((int)spinnerEpaisseurMurPartieEntiere.getValue(),
                                                                (int)spinnerEpaisseurMurNumerateur.getValue(),
                                                                Integer.parseInt(cbxEpaisseurMurDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    private void updateMargePlis(){
        salleControlleur.setMargeDesPlis(new FractionImperialeDTO((int)spinnerMargePlisPartieEntiere.getValue(),
                                                                (int)spinnerMargePlisNumerateur.getValue(),
                                                                Integer.parseInt(cbxMargePlisDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    private void updateMargeSoudure(){
        salleControlleur.setMargeDesSoudures(new FractionImperialeDTO((int)spinnerMargeSoudurePartieEntiere.getValue(),
                                                                (int)spinnerMargeSoudureNumerateur.getValue(),
                                                                Integer.parseInt(cbxMargeSoudureDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    private void updateHauteurRetourAir(){
        salleControlleur.setHauteurDesRetoursAir(new FractionImperialeDTO((int)spinnerHauteurRetourAirPartieEntiere.getValue(),
                                                                (int)spinnerHauteurRetourAirNumerateur.getValue(),
                                                                Integer.parseInt(cbxHauteurRetourAirDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    private void updateHauteurDistanceSolRetourAir(){
        salleControlleur.setHauteurSolDesRetoursAirDTO(new FractionImperialeDTO((int)spinnerDistanceSolRetourAirPartieEntiere.getValue(),
                                                                (int)spinnerDistanceSolRetourAirNumerateur.getValue(),
                                                                Integer.parseInt(cbxDistanceSolRetourAirDenominateur.getSelectedItem().toString())));
        
        refreshSalle();
    }
    private void updateAnglePlisSoudures(){
        salleControlleur.setAngleDesSoudures((double)spinnerAnglePlisSoudure.getValue());
    }
    private void updateSeparateurYPosition(){
        FractionImperialeDTO nouvelleFraction = new FractionImperialeDTO((int)spinnerSeparateurPositionYPartieEntiere.getValue(),
                                                                   (int)spinnerSeparateurPositionYNumerateur.getValue(),
                                                                   Integer.parseInt(cbxSeparateurPositionYDenominateur.getSelectedItem().toString()));
        salleControlleur.updateSelectedSeparateur(nouvelleFraction);
        refreshSalle();
    }
    private void updateSeparateurXPosition(){
        FractionImperialeDTO nouvelleFraction = new FractionImperialeDTO((int)spinnerSeparateurPositionXPartieEntiere.getValue(),
                                                                   (int)spinnerSeparateurPositionXNumerateur.getValue(),
                                                                   Integer.parseInt(cbxSeparateurPositionXDenominateur.getSelectedItem().toString()));
        salleControlleur.updateSelectedSeparateur(nouvelleFraction);
        refreshSalle();
    }
    
    private void updateAccessoireLargeur(){
        FractionImperialeDTO newCoordX = salleControlleur.getSelectedAccessoireCoordonneeX();
        
        FractionImperialeDTO newCoordY = salleControlleur.getSelectedAccessoireCoordonneeY();
        
        FractionImperialeDTO newLargeur = new FractionImperialeDTO((int)spinnerLargeurAccessoirePartieEntiere.getValue(),
                                                             (int)spinnerLargeurAccessoireNumerateur.getValue(),
                                                             Integer.parseInt(cbxLargeurAccessoireDenominateur.getSelectedItem().toString()));
        
        FractionImperialeDTO newHauteur = salleControlleur.getSelectedAccessoireHauteur();
        
        salleControlleur.updateSelectedAccessoire(newCoordX, newCoordY, newLargeur, newHauteur);
        refreshSalle();
    }
    
    private void updateAccessoireHauteur(){
        FractionImperialeDTO newCoordX = salleControlleur.getSelectedAccessoireCoordonneeX();
        
        FractionImperialeDTO newCoordY = salleControlleur.getSelectedAccessoireCoordonneeY();
        
        FractionImperialeDTO newLargeur = salleControlleur.getSelectedAccessoireLargeur();
        
        FractionImperialeDTO newHauteur = new FractionImperialeDTO((int)spinnerHauteurAccessoirePartieEntiere.getValue(),
                                                             (int)spinnerHauteurAccessoireNumerateur.getValue(),
                                                             Integer.parseInt(cbxHauteurAccessoireDenominateur.getSelectedItem().toString()));
        
        salleControlleur.updateSelectedAccessoire(newCoordX, newCoordY, newLargeur, newHauteur);
        refreshSalle();
    }
    
    private void updateAccessoireCoordonneeX(){
        FractionImperialeDTO newCoordX = new FractionImperialeDTO((int)spinnerCoordonneeXAccessoirePartieEntiere.getValue(),
                                                             (int)spinnerCoordonneeXAccessoireNumerateur.getValue(),
                                                             Integer.parseInt(cbxCoordonneeXAccessoireDenominateur.getSelectedItem().toString()));
        
        FractionImperialeDTO newCoordY = salleControlleur.getSelectedAccessoireCoordonneeY();
        
        FractionImperialeDTO newLargeur = salleControlleur.getSelectedAccessoireLargeur();
        
        FractionImperialeDTO newHauteur = salleControlleur.getSelectedAccessoireHauteur();
        
        salleControlleur.updateSelectedAccessoire(newCoordX, newCoordY, newLargeur, newHauteur);
        refreshSalle();
    }
    
    private void updateAccessoireCoordonneeY(){
        FractionImperialeDTO newCoordX = salleControlleur.getSelectedAccessoireCoordonneeX();
        
        FractionImperialeDTO newCoordY = new FractionImperialeDTO((int)spinnerCoordonneeYAccessoirePartieEntiere.getValue(),
                                                             (int)spinnerCoordonneeYAccessoireNumerateur.getValue(),
                                                             Integer.parseInt(cbxCoordonneeYAccessoireDenominateur.getSelectedItem().toString()));
        
        FractionImperialeDTO newLargeur = salleControlleur.getSelectedAccessoireLargeur();
        
        FractionImperialeDTO newHauteur = salleControlleur.getSelectedAccessoireHauteur();
        
        salleControlleur.updateSelectedAccessoire(newCoordX, newCoordY, newLargeur, newHauteur);
        refreshSalle();
    }
    
    private void updateLargeurRetourAir(){
        FractionImperialeDTO nouvelleFraction = new FractionImperialeDTO((int)spinnerLargeurRetourAirPartieEntiere.getValue(),
                                                                   (int)spinnerLargeurRetourAirNumerateur.getValue(),
                                                                   Integer.parseInt(cbxLargeurRetourAirDenominateur.getSelectedItem().toString()));
        salleControlleur.updateSelectedRetourAirLargeur(nouvelleFraction);
        refreshSalle();
    }
    
    public void updateMargeDesFenetres(){
        salleControlleur.setMargeDesFenetres(new FractionImperialeDTO((int)spinnerMargeDesFenetresPartieEntiere.getValue(),
                                                                (int)spinnerMargeDesFenetresNumerateur.getValue(),
                                                                Integer.parseInt(cbxMargeDesFenetresDenominateur.getSelectedItem().toString())));
        refreshSalle();
    }
    
    public void updateHauteurTrousVentilation() {
        // TODO : A IMPLANTER
        
        refreshSalle();
    }
    
    public void updateHauteurGrille() {
        salleControlleur.setHauteurGrille(new FractionImperialeDTO((int)spinnerHauteurGrillePartieEntiere.getValue(),
                                                                (int)spinnerHauteurGrilleNumerateur.getValue(),
                                                                Integer.parseInt(cbxHauteurGrilleDenominateur.getSelectedItem().toString())));        
        refreshSalle();
    }
    
    public void updateLargeurGrille() {
        salleControlleur.setLargeureGrille(new FractionImperialeDTO((int)spinnerLargeurGrillePartieEntiere.getValue(),
                                                                (int)spinnerLargeurGrilleNumerateur.getValue(),
                                                                Integer.parseInt(cbxLargeurGrilleDenominateur.getSelectedItem().toString())));        
        refreshSalle();
    }
    
    public void checkError(int errorType){
        switch (errorType) {
            case 0:
                errorMessage.setText("SALLE CONFORME");
                errorMessage.setForeground(Color.GREEN);
                break;
            case 1:
                errorMessage.setText("AVERTISSEMENT: SEPARATEUR NORD EN DEHORS DE LA SALLE");
                errorMessage.setForeground(Color.red);
                break;
            case 2:
                errorMessage.setText("AVERTISSEMENT: SEPARATEUR SUD EN DEHORS DE LA SALLE");
                errorMessage.setForeground(Color.red);
                break;
            case 3:
                errorMessage.setText("AVERTISSEMENT: SEPARATEUR OUEST EN DEHORS DE LA SALLE");
                errorMessage.setForeground(Color.red);
                break;
            case 4:
                errorMessage.setText("AVERTISSEMENT: SEPARATEUR EST EN DEHORS DE LA SALLE");
                errorMessage.setForeground(Color.red);
                break;
            case 5:
                errorMessage.setText("AVERTISSEMENT: SEPARATEUR EN DEHORS DE LA SALLE - VOIR VUE EN PLAN");
                errorMessage.setForeground(Color.red);
                break;
            case 6:
                errorMessage.setText("AVERTISSEMENT: ACCESSOIRE EN CONFLIT AVEC UN SEPARATEUR");
                errorMessage.setForeground(Color.red);
                break;
            case 7:
                errorMessage.setText("AVERTISSEMENT: DEUX ACCESSOIRES SONT EN CONFLIT");
                errorMessage.setForeground(Color.red);
                break;
            case 8:
                errorMessage.setText("AVERTISSEMENT: COORDONNE X ACCESSOIRE EN DEHORS DE LA SALLE");
                errorMessage.setForeground(Color.red);
                break;
            case 9:
                errorMessage.setText("AVERTISSEMENT: COORDONNE Y ACCESSOIRE EN DEHORS DE LA SALLE");
                errorMessage.setForeground(Color.red);
                break;   
            case 10:
                errorMessage.setText("AVERTISSEMENT: RETOUR D'AIR TROP LARGE POUR LE MUR");
                errorMessage.setForeground(Color.red);
                break;     
            case 11:
                errorMessage.setText("AVERTISSEMENT: PORTE TROP HAUTE POUR LE MUR");
                errorMessage.setForeground(Color.red);
                break;
            case 12:
                errorMessage.setText("AVERTISSEMENT: CONDUIT DE VENTILATION EN CONFLIT AVEC UN ACCESSOIRE");
                errorMessage.setForeground(Color.red);
                break;
            case 100:
                errorMessage.setText("COTE CONFORME DE CE COTE - VALIDEZ AVEC LA VUE EN PLAN");
                errorMessage.setForeground(Color.orange);
                break;
            default:
                break;
        }
        
    }
    
    private void loadComboboxListePanneaux(){
        int nombreMurs = salleControlleur.getCote(drawingPanel.getCurrentOrientation()).getMurs().size();
        String[] listePanneaux = new String[nombreMurs];
        for (byte index = 0; index < nombreMurs; index++) {
            listePanneaux[index] = "Panneau "+(index+1);
        }
        cbxPanneauNumero.setModel(new javax.swing.DefaultComboBoxModel<>(listePanneaux));
    }
}